
--------------------------------------------------
TXLib предупреждает:

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042DE71 в функции myGetline() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 135. Попытка записать данные по адресу 0x59587010 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057B65C (32-bit), Flags: Cmdre0, Thread: 0x5B00 (Main), GetLastError(): 126 (Не найден указанный модуль). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042DE71 in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:135:

    133:             break;
    134:         if (*lineptr[i] == '\n') {
=>  135:             *lineptr[i+1] = '\0';
    136:             break;
    137:         }

# 1 0x0045B6CE in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:47:

     45: 
     46: 
=>   47:     myGetline(&str3, &n, stdin);
     48:     myPuts(str3);
     49:     putchar('\n');

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep  7 2025 23:31:47, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 07 2025 23:38:40

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: signal (11, 0x00): SIGSEGV: Доступ по неверному указателю. Ставьте ассерты! 

Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042DE71 в функции myGetline() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 135. Попытка записать данные по адресу 0x59587010 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции signal() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057B65C (32-bit), Flags: Cmdre0, Thread: 0x5B00 (Main), GetLastError(): 126 (Не найден указанный модуль). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042DE71 in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:135:

    133:             break;
    134:         if (*lineptr[i] == '\n') {
=>  135:             *lineptr[i+1] = '\0';
    136:             break;
    137:         }

# 1 0x0045B6CE in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:47:

     45: 
     46: 
=>   47:     myGetline(&str3, &n, stdin);
     48:     myPuts(str3);
     49:     putchar('\n');

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep  7 2025 23:31:47, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 07 2025 23:38:40

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042DDB9 в функции myGetline() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 120. Попытка записать данные по адресу 0x59586FD0 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057B65C (32-bit), Flags: Cmdre0, Thread: 0x3B8C (Main), GetLastError(): 126 (Не найден указанный модуль). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042DDB9 in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:120:

    118:     fseek(file, 0L, SEEK_SET);
    119:     for (int i = 0; ; i++) {
=>  120:         *lineptr[i] = (char)fgetc(file);
    121:         if (*lineptr[i] == '\0')
    122:             break;

# 1 0x0045B686 in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:47:

     45: 
     46: 
=>   47:     myGetline(&str3, &n, stdin);
     48:     myPuts(str3);
     49:     putchar('\n');

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep  7 2025 23:31:47, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 07 2025 23:59:11

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: signal (11, 0x00): SIGSEGV: Доступ по неверному указателю. Ставьте ассерты! 

Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042DDB9 в функции myGetline() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 120. Попытка записать данные по адресу 0x59586FD0 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции signal() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057B65C (32-bit), Flags: Cmdre0, Thread: 0x3B8C (Main), GetLastError(): 126 (Не найден указанный модуль). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042DDB9 in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:120:

    118:     fseek(file, 0L, SEEK_SET);
    119:     for (int i = 0; ; i++) {
=>  120:         *lineptr[i] = (char)fgetc(file);
    121:         if (*lineptr[i] == '\0')
    122:             break;

# 1 0x0045B686 in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:47:

     45: 
     46: 
=>   47:     myGetline(&str3, &n, stdin);
     48:     myPuts(str3);
     49:     putchar('\n');

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep  7 2025 23:31:47, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 07 2025 23:59:11

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042DDB9 в функции myGetline() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 120. Попытка записать данные по адресу 0x59586FD0 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057B65C (32-bit), Flags: Cmdre0, Thread: 0x2A88 (Main), GetLastError(): 126 (Не найден указанный модуль). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042DDB9 in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:120:

    118:     fseek(file, 0L, SEEK_SET);
    119:     for (int i = 0; ; i++) {
=>  120:         *lineptr[i] = (char)fgetc(file);
    121:         if (*lineptr[i] == '\0')
    122:             break;

# 1 0x0045B686 in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:47:

     45: 
     46: 
=>   47:     myGetline(&str3, &n, stdin);
     48:     myPuts(str3);
     49:     putchar('\n');

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep  7 2025 23:31:47, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 08 2025 00:03:01

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: signal (11, 0x00): SIGSEGV: Доступ по неверному указателю. Ставьте ассерты! 

Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042DDB9 в функции myGetline() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 120. Попытка записать данные по адресу 0x59586FD0 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции signal() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057B65C (32-bit), Flags: Cmdre0, Thread: 0x2A88 (Main), GetLastError(): 126 (Не найден указанный модуль). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042DDB9 in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:120:

    118:     fseek(file, 0L, SEEK_SET);
    119:     for (int i = 0; ; i++) {
=>  120:         *lineptr[i] = (char)fgetc(file);
    121:         if (*lineptr[i] == '\0')
    122:             break;

# 1 0x0045B686 in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:47:

     45: 
     46: 
=>   47:     myGetline(&str3, &n, stdin);
     48:     myPuts(str3);
     49:     putchar('\n');

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep  7 2025 23:31:47, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 08 2025 00:03:01

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042DD9E в функции myGetline() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 119. Попытка записать данные по адресу 0x59586F90 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057B65C (32-bit), Flags: Cmdre0, Thread: 0x34DC (Main), GetLastError(): 126 (Не найден указанный модуль). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042DD9E in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:119:

    117: 
    118:     for (int i = 0; ; i++) {
=>  119:         *lineptr[i] = (char)fgetc(file);
    120:         if (*lineptr[i] == '\0')
    121:             break;

# 1 0x0045B646 in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:47:

     45: 
     46: 
=>   47:     myGetline(&str3, &n, stdin);
     48:     myPuts(str3);
     49:     putchar('\n');

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep  8 2025 00:05:08, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 08 2025 00:05:15

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: signal (11, 0x00): SIGSEGV: Доступ по неверному указателю. Ставьте ассерты! 

Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042DD9E в функции myGetline() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 119. Попытка записать данные по адресу 0x59586F90 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции signal() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057B65C (32-bit), Flags: Cmdre0, Thread: 0x34DC (Main), GetLastError(): 126 (Не найден указанный модуль). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042DD9E in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:119:

    117: 
    118:     for (int i = 0; ; i++) {
=>  119:         *lineptr[i] = (char)fgetc(file);
    120:         if (*lineptr[i] == '\0')
    121:             break;

# 1 0x0045B646 in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:47:

     45: 
     46: 
=>   47:     myGetline(&str3, &n, stdin);
     48:     myPuts(str3);
     49:     putchar('\n');

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep  8 2025 00:05:08, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 08 2025 00:05:15

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042DD9E в функции myGetline() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 119. Попытка записать данные по адресу 0x59316FB0 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057B65C (32-bit), Flags: Cmdre0, Thread: 0x5B38 (Main), GetLastError(): 126 (Не найден указанный модуль). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042DD9E in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:119:

    117: 
    118:     for (int i = 0; ; i++) {
=>  119:         *lineptr[i] = (char)fgetc(file);
    120:         if (*lineptr[i] == '\0')
    121:             break;

# 1 0x0045B66A in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:47:

     45: 
     46: 
=>   47:     myGetline(&str3, &n, stdin);
     48:     myPuts(str3);
     49:     putchar('\n');

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep  8 2025 00:06:44, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 08 2025 00:06:52

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: signal (11, 0x00): SIGSEGV: Доступ по неверному указателю. Ставьте ассерты! 

Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042DD9E в функции myGetline() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 119. Попытка записать данные по адресу 0x59316FB0 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции signal() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057B65C (32-bit), Flags: Cmdre0, Thread: 0x5B38 (Main), GetLastError(): 126 (Не найден указанный модуль). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042DD9E in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:119:

    117: 
    118:     for (int i = 0; ; i++) {
=>  119:         *lineptr[i] = (char)fgetc(file);
    120:         if (*lineptr[i] == '\0')
    121:             break;

# 1 0x0045B66A in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:47:

     45: 
     46: 
=>   47:     myGetline(&str3, &n, stdin);
     48:     myPuts(str3);
     49:     putchar('\n');

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep  8 2025 00:06:44, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 08 2025 00:06:52

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042DDAD в функции myGetline() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 122. Попытка записать данные по адресу 0x59657010 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057B65C (32-bit), Flags: Cmdre0, Thread: 0x4278 (Main), GetLastError(): 126 (Не найден указанный модуль). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042DDAD in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:122:

    120: 
    121:     for (int i = 0; ; i++) {
=>  122:         *lineptr[i] = (char)fgetc(file);
    123:         if (*lineptr[i] == '\0')
    124:             break;

# 1 0x0045B6D5 in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:47:

     45: 
     46: 
=>   47:     myGetline(&str3, &n, stdin);
     48:     myPuts(str3);
     49:     putchar('\n');

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep  8 2025 17:36:43, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 08 2025 17:36:48

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: signal (11, 0x00): SIGSEGV: Доступ по неверному указателю. Ставьте ассерты! 

Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042DDAD в функции myGetline() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 122. Попытка записать данные по адресу 0x59657010 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции signal() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057B65C (32-bit), Flags: Cmdre0, Thread: 0x4278 (Main), GetLastError(): 126 (Не найден указанный модуль). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042DDAD in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:122:

    120: 
    121:     for (int i = 0; ; i++) {
=>  122:         *lineptr[i] = (char)fgetc(file);
    123:         if (*lineptr[i] == '\0')
    124:             break;

# 1 0x0045B6D5 in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:47:

     45: 
     46: 
=>   47:     myGetline(&str3, &n, stdin);
     48:     myPuts(str3);
     49:     putchar('\n');

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep  8 2025 17:36:43, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 08 2025 17:36:48

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042DDAD в функции myGetline() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 122. Попытка записать данные по адресу 0x59587010 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057B65C (32-bit), Flags: Cmdre0, Thread: 0x4368 (Main), GetLastError(): 126 (Не найден указанный модуль). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042DDAD in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:122:

    120: 
    121:     for (int i = 0; ; i++) {
=>  122:         *lineptr[i] = (char)fgetc(file);
    123:         if (*lineptr[i] == '\0')
    124:             break;

# 1 0x0045B6D5 in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:46:

     44: 
     45: 
=>   46:     myGetline(&str3, &n, stdin);
     47:     myPuts(str3);
     48:     putchar('\n');

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep  8 2025 17:51:06, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 08 2025 17:51:12

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: signal (11, 0x00): SIGSEGV: Доступ по неверному указателю. Ставьте ассерты! 

Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042DDAD в функции myGetline() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 122. Попытка записать данные по адресу 0x59587010 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции signal() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057B65C (32-bit), Flags: Cmdre0, Thread: 0x4368 (Main), GetLastError(): 126 (Не найден указанный модуль). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042DDAD in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:122:

    120: 
    121:     for (int i = 0; ; i++) {
=>  122:         *lineptr[i] = (char)fgetc(file);
    123:         if (*lineptr[i] == '\0')
    124:             break;

# 1 0x0045B6D5 in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:46:

     44: 
     45: 
=>   46:     myGetline(&str3, &n, stdin);
     47:     myPuts(str3);
     48:     putchar('\n');

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep  8 2025 17:51:06, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 08 2025 17:51:12

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042DDA4 в функции myGetline() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 121. Попытка записать данные по адресу 0x59587010 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057B65C (32-bit), Flags: Cmdre0, Thread: 0x1F40 (Main), GetLastError(): 126 (Не найден указанный модуль). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042DDA4 in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:121:

    119: 
    120:     for (int i = 0; ; i++) {
=>  121:         *lineptr[i] = (char)fgetc(file);
    122:         if (*lineptr[i] == '\0')
    123:             break;

# 1 0x0045B6DD in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:46:

     44: 
     45: 
=>   46:     myGetline(&str3, &n, stdin);
     47:     myPuts(str3);
     48:     putchar('\n');

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep  8 2025 22:17:42, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 08 2025 22:17:49

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: signal (11, 0x00): SIGSEGV: Доступ по неверному указателю. Ставьте ассерты! 

Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042DDA4 в функции myGetline() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 121. Попытка записать данные по адресу 0x59587010 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции signal() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057B65C (32-bit), Flags: Cmdre0, Thread: 0x1F40 (Main), GetLastError(): 126 (Не найден указанный модуль). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042DDA4 in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:121:

    119: 
    120:     for (int i = 0; ; i++) {
=>  121:         *lineptr[i] = (char)fgetc(file);
    122:         if (*lineptr[i] == '\0')
    123:             break;

# 1 0x0045B6DD in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:46:

     44: 
     45: 
=>   46:     myGetline(&str3, &n, stdin);
     47:     myPuts(str3);
     48:     putchar('\n');

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep  8 2025 22:17:42, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 08 2025 22:17:49

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042DDA4 в функции myGetline() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 121. Попытка записать данные по адресу 0x59587010 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057B65C (32-bit), Flags: Cmdre0, Thread: 0x6148 (Main), GetLastError(): 126 (Не найден указанный модуль). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042DDA4 in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:121:

    119: 
    120:     for (int i = 0; ; i++) {
=>  121:         *lineptr[i] = (char)fgetc(file);
    122:         if (*lineptr[i] == '\0')
    123:             break;

# 1 0x0045B6DD in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:46:

     44: 
     45: 
=>   46:     myGetline(&str3, &n, stdin);
     47:     myPuts(str3);
     48:     putchar('\n');

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep  8 2025 22:18:44, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 08 2025 22:18:49

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: signal (11, 0x00): SIGSEGV: Доступ по неверному указателю. Ставьте ассерты! 

Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042DDA4 в функции myGetline() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 121. Попытка записать данные по адресу 0x59587010 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции signal() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057B65C (32-bit), Flags: Cmdre0, Thread: 0x6148 (Main), GetLastError(): 126 (Не найден указанный модуль). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042DDA4 in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:121:

    119: 
    120:     for (int i = 0; ; i++) {
=>  121:         *lineptr[i] = (char)fgetc(file);
    122:         if (*lineptr[i] == '\0')
    123:             break;

# 1 0x0045B6DD in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:46:

     44: 
     45: 
=>   46:     myGetline(&str3, &n, stdin);
     47:     myPuts(str3);
     48:     putchar('\n');

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep  8 2025 22:18:44, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 08 2025 22:18:49

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042DDEA в функции myGetline() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 130. Попытка записать данные по адресу 0x005091B8 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057B65C (32-bit), Flags: Cmdre0, Thread: 0xC1C (Main), GetLastError(): 126 (Не найден указанный модуль). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042DDEA in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:130:

    128:             return -1;
    129: 
=>  130:         (*lineptr)[i] = (char)fgetc(file);
    131: 
    132:         if ((*lineptr)[i] == '\0')

# 1 0x0045B65A in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:47:

     45: 
     46: 
=>   47:     myGetline(&str3, &n, stdin);
     48:     myPuts(str3);
     49:     putchar('\n');

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep  8 2025 22:54:42, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 08 2025 22:54:49

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: signal (11, 0x00): SIGSEGV: Доступ по неверному указателю. Ставьте ассерты! 

Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042DDEA в функции myGetline() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 130. Попытка записать данные по адресу 0x005091B8 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции signal() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057B65C (32-bit), Flags: Cmdre0, Thread: 0xC1C (Main), GetLastError(): 126 (Не найден указанный модуль). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042DDEA in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:130:

    128:             return -1;
    129: 
=>  130:         (*lineptr)[i] = (char)fgetc(file);
    131: 
    132:         if ((*lineptr)[i] == '\0')

# 1 0x0045B65A in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:47:

     45: 
     46: 
=>   47:     myGetline(&str3, &n, stdin);
     48:     myPuts(str3);
     49:     putchar('\n');

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep  8 2025 22:54:42, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 08 2025 22:54:49

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042DDEA в функции myGetline() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 130. Попытка записать данные по адресу 0x005091B8 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057B65C (32-bit), Flags: Cmdre0, Thread: 0x6224 (Main), GetLastError(): 126 (Не найден указанный модуль). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042DDEA in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:130:

    128:             return -1;
    129: 
=>  130:         (*lineptr)[i] = (char)fgetc(file);
    131: 
    132:         if ((*lineptr)[i] == '\0')

# 1 0x0045B65A in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:47:

     45: 
     46: 
=>   47:     myGetline(&str2, &n, stdin);
     48:     myPuts(str3);
     49:     putchar('\n');

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep  8 2025 22:54:42, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 08 2025 22:55:46

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: signal (11, 0x00): SIGSEGV: Доступ по неверному указателю. Ставьте ассерты! 

Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042DDEA в функции myGetline() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 130. Попытка записать данные по адресу 0x005091B8 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции signal() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057B65C (32-bit), Flags: Cmdre0, Thread: 0x6224 (Main), GetLastError(): 126 (Не найден указанный модуль). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042DDEA in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:130:

    128:             return -1;
    129: 
=>  130:         (*lineptr)[i] = (char)fgetc(file);
    131: 
    132:         if ((*lineptr)[i] == '\0')

# 1 0x0045B65A in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:47:

     45: 
     46: 
=>   47:     myGetline(&str2, &n, stdin);
     48:     myPuts(str3);
     49:     putchar('\n');

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep  8 2025 22:54:42, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 08 2025 22:55:46

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042DDC6 в функции myGetline() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 126. Попытка прочесть данные по адресу 0x00000014 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057B65C (32-bit), Flags: Cmdre0, Thread: 0x245C (Main), GetLastError(): 998 (Неверная попытка доступа к адресу памяти). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042DDC6 in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:126:

    124:         }
    125: 
=>  126:         if ((*lineptr)[charactersCount] == EOF)
    127:             return -1;
    128: 

# 1 0x0045B65A in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:47:

     45: 
     46: 
=>   47:     myGetline(&str3, &n, stdin);
     48:     myPuts(str3);
     49:     putchar('\n');

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep  8 2025 23:11:05, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 08 2025 23:11:12

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: signal (11, 0x00): SIGSEGV: Доступ по неверному указателю. Ставьте ассерты! 

Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042DDC6 в функции myGetline() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 126. Попытка прочесть данные по адресу 0x00000014 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции signal() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057B65C (32-bit), Flags: Cmdre0, Thread: 0x245C (Main), GetLastError(): 998 (Неверная попытка доступа к адресу памяти). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042DDC6 in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:126:

    124:         }
    125: 
=>  126:         if ((*lineptr)[charactersCount] == EOF)
    127:             return -1;
    128: 

# 1 0x0045B65A in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:47:

     45: 
     46: 
=>   47:     myGetline(&str3, &n, stdin);
     48:     myPuts(str3);
     49:     putchar('\n');

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep  8 2025 23:11:05, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 08 2025 23:11:12

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042DDC6 в функции myGetline() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 126. Попытка прочесть данные по адресу 0x00000014 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057B65C (32-bit), Flags: Cmdre0, Thread: 0x2104 (Main), GetLastError(): 998 (Неверная попытка доступа к адресу памяти). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042DDC6 in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:126:

    124:         }
    125: 
=>  126:         if ((*lineptr)[charactersCount] == EOF)
    127:             return -1;
    128: 

# 1 0x0045B65A in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:47:

     45: 
     46: 
=>   47:     myGetline(&str3, &n, stdin);
     48:     myPuts(str3);
     49:     putchar('\n');

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep  8 2025 23:11:05, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 08 2025 23:12:33

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: signal (11, 0x00): SIGSEGV: Доступ по неверному указателю. Ставьте ассерты! 

Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042DDC6 в функции myGetline() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 126. Попытка прочесть данные по адресу 0x00000014 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции signal() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057B65C (32-bit), Flags: Cmdre0, Thread: 0x2104 (Main), GetLastError(): 998 (Неверная попытка доступа к адресу памяти). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042DDC6 in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:126:

    124:         }
    125: 
=>  126:         if ((*lineptr)[charactersCount] == EOF)
    127:             return -1;
    128: 

# 1 0x0045B65A in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:47:

     45: 
     46: 
=>   47:     myGetline(&str3, &n, stdin);
     48:     myPuts(str3);
     49:     putchar('\n');

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep  8 2025 23:11:05, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 08 2025 23:12:32

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042DDC6 в функции myGetline() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 126. Попытка прочесть данные по адресу 0x00000014 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057B65C (32-bit), Flags: Cmdre0, Thread: 0x698 (Main), GetLastError(): 998 (Неверная попытка доступа к адресу памяти). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042DDC6 in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:126:

    124:         }
    125: 
=>  126:         if ((*lineptr)[charactersCount] == EOF)
    127:             return -1;
    128: 

# 1 0x0045B65A in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:47:

     45: 
     46: 
=>   47:     myGetline(&str3, &n, stdin);
     48:     myPuts(str3);
     49:     putchar('\n');

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep  8 2025 23:19:08, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 08 2025 23:20:09

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: signal (11, 0x00): SIGSEGV: Доступ по неверному указателю. Ставьте ассерты! 

Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042DDC6 в функции myGetline() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 126. Попытка прочесть данные по адресу 0x00000014 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции signal() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057B65C (32-bit), Flags: Cmdre0, Thread: 0x698 (Main), GetLastError(): 998 (Неверная попытка доступа к адресу памяти). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042DDC6 in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:126:

    124:         }
    125: 
=>  126:         if ((*lineptr)[charactersCount] == EOF)
    127:             return -1;
    128: 

# 1 0x0045B65A in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:47:

     45: 
     46: 
=>   47:     myGetline(&str3, &n, stdin);
     48:     myPuts(str3);
     49:     putchar('\n');

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep  8 2025 23:19:08, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 08 2025 23:20:10

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042DDEE в функции myGetline() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 133. Попытка прочесть данные по адресу NULL в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057C65C (32-bit), Flags: Cmdre0, Thread: 0x3894 (Main), GetLastError(): 87 (Параметр задан неверно). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042DDEE in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:133:

    131:         }
    132: 
=>  133:         if ((*lineptr)[charactersCount] == EOF)
    134:             return -1;
    135: 

# 1 0x0045CE2B in C:\Users\Admin\Desktop\Strings\Strings.exe: fillingArrOfPtr() at C:/Users/Admin/Desktop/Strings/arrayFunctions.cpp:79:

     77:     for (size_t string = 0; string < numOfPtr; string++) {
     78:         size_t sizeOfString = myStrlen (arrayOfPtr[string]);
=>   79:         myGetline(&(arrayOfPtr[string]), &sizeOfString, stdin);
     80:     }
     81: }

# 2 0x0045B6BE in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:28:

     26:     char* text[] = {string1, string2, string3, string4};
     27: 
=>   28:     fillingArrOfPtr(text, 4);
     29:     printArrOfPtr(text, 4);
     30: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 11 2025 17:27:39, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 11 2025 17:27:45

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: signal (11, 0x00): SIGSEGV: Доступ по неверному указателю. Ставьте ассерты! 

Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042DDEE в функции myGetline() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 133. Попытка прочесть данные по адресу NULL в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции signal() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057C65C (32-bit), Flags: Cmdre0, Thread: 0x3894 (Main), GetLastError(): 87 (Параметр задан неверно). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042DDEE in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:133:

    131:         }
    132: 
=>  133:         if ((*lineptr)[charactersCount] == EOF)
    134:             return -1;
    135: 

# 1 0x0045CE2B in C:\Users\Admin\Desktop\Strings\Strings.exe: fillingArrOfPtr() at C:/Users/Admin/Desktop/Strings/arrayFunctions.cpp:79:

     77:     for (size_t string = 0; string < numOfPtr; string++) {
     78:         size_t sizeOfString = myStrlen (arrayOfPtr[string]);
=>   79:         myGetline(&(arrayOfPtr[string]), &sizeOfString, stdin);
     80:     }
     81: }

# 2 0x0045B6BE in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:28:

     26:     char* text[] = {string1, string2, string3, string4};
     27: 
=>   28:     fillingArrOfPtr(text, 4);
     29:     printArrOfPtr(text, 4);
     30: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 11 2025 17:27:39, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 11 2025 17:27:45

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: signal (22, 0x00): SIGABRT: Аварийное завершение программы, вызвана функция abort(). 

С помощью функции signal() вы можете сами обработать эту ошибку.

#1: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057C65C (32-bit), Flags: Cmdre0, Thread: 0x3120 (Main), GetLastError(): 126 (Не найден указанный модуль). 

--------------------------------------------------
Стек вызовов:

# 0 0x0043FD18 in C:\Users\Admin\Desktop\Strings\Strings.exe: (anonymous namespace)::TX::_txOnSignal() at c:/users/admin/downloads/codeblocks/mingw/include/txlib.h:11173
# 1 0x771C8F03 in C:\WINDOWS\System32\msvcrt.dll: raise()
# 2 0x771CD3CB in C:\WINDOWS\System32\msvcrt.dll: abort()
# 3 0x771C9D47 in C:\WINDOWS\System32\msvcrt.dll: assert()

# 4 0x0042DD64 in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:119:

    117: 
    118: ssize_t myGetline(char** lineptr, size_t* n, FILE* file) {
=>  119:     assert(n != NULL);
    120:     assert(file != NULL);
    121: 

# 5 0x0045CDBC in C:\Users\Admin\Desktop\Strings\Strings.exe: fillingArrOfPtr() at C:/Users/Admin/Desktop/Strings/arrayFunctions.cpp:81:

     79:         //size_t sizeOfString = sizeof (arrayOfPtr[string]);
     80:         //printf ("size of [%d] = %d\n", string, sizeOfString);
=>   81:         myGetline(&(arrayOfPtr[string]), 0, stdin);
     82:     }
     83: }

# 6 0x0045B66A in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:23:

     21:     char* text[4] = {};
     22: 
=>   23:     fillingArrOfPtr(text, 4);
     24:     printArrOfPtr(text, 4);
     25: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 11 2025 17:54:08, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 11 2025 17:54:15

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042DDEE в функции myGetline() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 133. Попытка прочесть данные по адресу 0x00000001 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057C65C (32-bit), Flags: Cmdre0, Thread: 0x6FCC (Main), GetLastError(): 998 (Неверная попытка доступа к адресу памяти). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042DDEE in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:133:

    131:         }
    132: 
=>  133:         if ((*lineptr)[charactersCount] == EOF)
    134:             return -1;
    135: 

# 1 0x0045CE16 in C:\Users\Admin\Desktop\Strings\Strings.exe: fillingArrOfPtr() at C:/Users/Admin/Desktop/Strings/arrayFunctions.cpp:81:

     79:     for (size_t string = 0; string < numOfPtr; string++) {
     80:         size_t sizeOfString = 1;
=>   81:         myGetline(&(arrayOfPtr[string]), &sizeOfString, stdin);
     82:         printf ("size of [%d] = %d\n", string, sizeOfString);
     83:     }

# 2 0x0045B6A9 in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:28:

     26:     char* text[4] = {string1, string2, string3, string4};
     27: 
=>   28:     fillingArrOfPtr(text, 4);
     29:     printArrOfPtr(text, 4);
     30:     freeArrOfPtr(text, 4);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 11 2025 18:11:52, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 11 2025 18:11:59

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: signal (11, 0x00): SIGSEGV: Доступ по неверному указателю. Ставьте ассерты! 

Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042DDEE в функции myGetline() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 133. Попытка прочесть данные по адресу 0x00000001 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции signal() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057C65C (32-bit), Flags: Cmdre0, Thread: 0x6FCC (Main), GetLastError(): 998 (Неверная попытка доступа к адресу памяти). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042DDEE in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:133:

    131:         }
    132: 
=>  133:         if ((*lineptr)[charactersCount] == EOF)
    134:             return -1;
    135: 

# 1 0x0045CE16 in C:\Users\Admin\Desktop\Strings\Strings.exe: fillingArrOfPtr() at C:/Users/Admin/Desktop/Strings/arrayFunctions.cpp:81:

     79:     for (size_t string = 0; string < numOfPtr; string++) {
     80:         size_t sizeOfString = 1;
=>   81:         myGetline(&(arrayOfPtr[string]), &sizeOfString, stdin);
     82:         printf ("size of [%d] = %d\n", string, sizeOfString);
     83:     }

# 2 0x0045B6A9 in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:28:

     26:     char* text[4] = {string1, string2, string3, string4};
     27: 
=>   28:     fillingArrOfPtr(text, 4);
     29:     printArrOfPtr(text, 4);
     30:     freeArrOfPtr(text, 4);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 11 2025 18:11:52, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 11 2025 18:11:59

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042DDEE в функции myGetline() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 133. Попытка прочесть данные по адресу 0x00000001 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057C65C (32-bit), Flags: Cmdre0, Thread: 0x2F34 (Main), GetLastError(): 998 (Неверная попытка доступа к адресу памяти). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042DDEE in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:133:

    131:         }
    132: 
=>  133:         if ((*lineptr)[charactersCount] == EOF)
    134:             return -1;
    135: 

# 1 0x0045CE16 in C:\Users\Admin\Desktop\Strings\Strings.exe: fillingArrOfPtr() at C:/Users/Admin/Desktop/Strings/arrayFunctions.cpp:81:

     79:     for (size_t string = 0; string < numOfPtr; string++) {
     80:         size_t sizeOfString = 1;
=>   81:         myGetline(&(arrayOfPtr[string]), &sizeOfString, stdin);
     82:         printf ("size of [%d] = %d\n", string, sizeOfString);
     83:     }

# 2 0x0045B6A9 in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:28:

     26:     char* text[4] = {string1, string2, string3, string4};
     27: 
=>   28:     fillingArrOfPtr(text, 4);
     29:     printArrOfPtr(text, 4);
     30:     freeArrOfPtr(text, 4);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 11 2025 18:11:52, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 11 2025 18:12:14

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: signal (11, 0x00): SIGSEGV: Доступ по неверному указателю. Ставьте ассерты! 

Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042DDEE в функции myGetline() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 133. Попытка прочесть данные по адресу 0x00000001 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции signal() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057C65C (32-bit), Flags: Cmdre0, Thread: 0x2F34 (Main), GetLastError(): 998 (Неверная попытка доступа к адресу памяти). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042DDEE in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:133:

    131:         }
    132: 
=>  133:         if ((*lineptr)[charactersCount] == EOF)
    134:             return -1;
    135: 

# 1 0x0045CE16 in C:\Users\Admin\Desktop\Strings\Strings.exe: fillingArrOfPtr() at C:/Users/Admin/Desktop/Strings/arrayFunctions.cpp:81:

     79:     for (size_t string = 0; string < numOfPtr; string++) {
     80:         size_t sizeOfString = 1;
=>   81:         myGetline(&(arrayOfPtr[string]), &sizeOfString, stdin);
     82:         printf ("size of [%d] = %d\n", string, sizeOfString);
     83:     }

# 2 0x0045B6A9 in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:28:

     26:     char* text[4] = {string1, string2, string3, string4};
     27: 
=>   28:     fillingArrOfPtr(text, 4);
     29:     printArrOfPtr(text, 4);
     30:     freeArrOfPtr(text, 4);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 11 2025 18:11:52, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 11 2025 18:12:14

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: signal (22, 0x00): SIGABRT: Аварийное завершение программы, вызвана функция abort(). 

С помощью функции signal() вы можете сами обработать эту ошибку.

#1: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057C65C (32-bit), Flags: Cmdre0, Thread: 0x1ACC (Main), GetLastError(): 126 (Не найден указанный модуль). 

--------------------------------------------------
Стек вызовов:

# 0 0x0043FD18 in C:\Users\Admin\Desktop\Strings\Strings.exe: (anonymous namespace)::TX::_txOnSignal() at c:/users/admin/downloads/codeblocks/mingw/include/txlib.h:11173
# 1 0x771C8F03 in C:\WINDOWS\System32\msvcrt.dll: raise()
# 2 0x771CD3CB in C:\WINDOWS\System32\msvcrt.dll: abort()
# 3 0x771C9D47 in C:\WINDOWS\System32\msvcrt.dll: assert()

# 4 0x0045CDAF in C:\Users\Admin\Desktop\Strings\Strings.exe: fillingArrOfPtr() at C:/Users/Admin/Desktop/Strings/arrayFunctions.cpp:77:

     75: 
     76: void fillingArrOfPtr (char** arrayOfPtr, size_t numOfPtr) {
=>   77:     assert (arrayOfPtr != NULL);
     78: 
     79:     for (size_t string = 0; string < numOfPtr; string++) {

# 5 0x0045B652 in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:23:

     21:     char** text = {};
     22: 
=>   23:     fillingArrOfPtr(text, 4);
     24:     printArrOfPtr(text, 4);
     25:     reverseArrOfPtr(&text, 4);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 11 2025 18:46:03, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 11 2025 18:46:11

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042D915 в функции myPuts() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 12. Попытка прочесть данные по адресу 0x00000008 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057C65C (32-bit), Flags: Cmdre0, Thread: 0x520C (Main), GetLastError(): 126 (Не найден указанный модуль). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042D915 in C:\Users\Admin\Desktop\Strings\Strings.exe: myPuts() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:12:

     10: 
     11:     int returnableValue = 0;
=>   12:     for (int i = 0; str[i] != '\0'; i++)
     13:         returnableValue = putchar (str[i]);
     14:     return returnableValue;

# 1 0x0045CE8D in C:\Users\Admin\Desktop\Strings\Strings.exe: printArrOfPtr() at C:/Users/Admin/Desktop/Strings/arrayFunctions.cpp:91:

     89:     for (size_t string = 0; string < numOfPtr; string++) {
     90:         printf ("[%d] = ", string);
=>   91:         myPuts(arrayOfPtr[string]);
     92:     }
     93: }

# 2 0x0045B6A6 in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:26:

     24:     printArrOfPtr(text, 4);
     25:     reverseArrOfPtr(text, 4);
=>   26:     printArrOfPtr(text, 4);
     27:     freeArrOfPtr(text, 4);
     28: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 11 2025 19:37:30, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 11 2025 19:37:39

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: signal (11, 0x00): SIGSEGV: Доступ по неверному указателю. Ставьте ассерты! 

Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042D915 в функции myPuts() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 12. Попытка прочесть данные по адресу 0x00000008 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции signal() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057C65C (32-bit), Flags: Cmdre0, Thread: 0x520C (Main), GetLastError(): 126 (Не найден указанный модуль). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042D915 in C:\Users\Admin\Desktop\Strings\Strings.exe: myPuts() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:12:

     10: 
     11:     int returnableValue = 0;
=>   12:     for (int i = 0; str[i] != '\0'; i++)
     13:         returnableValue = putchar (str[i]);
     14:     return returnableValue;

# 1 0x0045CE8D in C:\Users\Admin\Desktop\Strings\Strings.exe: printArrOfPtr() at C:/Users/Admin/Desktop/Strings/arrayFunctions.cpp:91:

     89:     for (size_t string = 0; string < numOfPtr; string++) {
     90:         printf ("[%d] = ", string);
=>   91:         myPuts(arrayOfPtr[string]);
     92:     }
     93: }

# 2 0x0045B6A6 in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:26:

     24:     printArrOfPtr(text, 4);
     25:     reverseArrOfPtr(text, 4);
=>   26:     printArrOfPtr(text, 4);
     27:     freeArrOfPtr(text, 4);
     28: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 11 2025 19:37:30, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 11 2025 19:37:39

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x7793BF67 в функции RtlFormatCurrentUserKeyPath(). Попытка прочесть данные по адресу 0x00000014 в модуле C:\WINDOWS\SYSTEM32\ntdll.dll. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057C65C (32-bit), Flags: Cmdre0, Thread: 0x1450 (Main), GetLastError(): 126 (Не найден указанный модуль). 

--------------------------------------------------
Стек вызовов:

# 0 0x7793BF67 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlFormatCurrentUserKeyPath()
# 1 0x77992F10 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlTestBit()
# 2 0x77965382 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlReAllocateHeap()
# 3 0x771B8E6F in C:\WINDOWS\System32\msvcrt.dll: realloc()

# 4 0x0042DDDF in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:130:

    128:         if (charactersCount == *n) {
    129:             *n *= 2;
=>  130:             *lineptr = (char*)realloc(*lineptr, *n);
    131:         }
    132: 

# 5 0x0045CDFE in C:\Users\Admin\Desktop\Strings\Strings.exe: fillingArrOfPtr() at C:/Users/Admin/Desktop/Strings/arrayFunctions.cpp:81:

     79:     for (size_t string = 0; string < numOfPtr; string++) {
     80:         size_t sizeOfString = 1;
=>   81:         myGetline(&(arrayOfPtr[string]), &sizeOfString, stdin);
     82:         printf ("size of [%d] = %d\n", string, sizeOfString);
     83:     }

# 6 0x0045B66A in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:23:

     21:     char* text[4] = {};
     22: 
=>   23:     fillingArrOfPtr(text, 4);
     24:     printArrOfPtr(text, 4);
     25:     reverseArrOfPtr(text, 4);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 11 2025 19:41:31, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 11 2025 19:41:40

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: signal (11, 0x00): SIGSEGV: Доступ по неверному указателю. Ставьте ассерты! 

Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x7793BF67 в функции RtlFormatCurrentUserKeyPath(). Попытка прочесть данные по адресу 0x00000014 в модуле C:\WINDOWS\SYSTEM32\ntdll.dll. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции signal() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057C65C (32-bit), Flags: Cmdre0, Thread: 0x1450 (Main), GetLastError(): 126 (Не найден указанный модуль). 

--------------------------------------------------
Стек вызовов:

# 0 0x7793BF67 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlFormatCurrentUserKeyPath()
# 1 0x77992F10 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlTestBit()
# 2 0x77965382 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlReAllocateHeap()
# 3 0x771B8E6F in C:\WINDOWS\System32\msvcrt.dll: realloc()

# 4 0x0042DDDF in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:130:

    128:         if (charactersCount == *n) {
    129:             *n *= 2;
=>  130:             *lineptr = (char*)realloc(*lineptr, *n);
    131:         }
    132: 

# 5 0x0045CDFE in C:\Users\Admin\Desktop\Strings\Strings.exe: fillingArrOfPtr() at C:/Users/Admin/Desktop/Strings/arrayFunctions.cpp:81:

     79:     for (size_t string = 0; string < numOfPtr; string++) {
     80:         size_t sizeOfString = 1;
=>   81:         myGetline(&(arrayOfPtr[string]), &sizeOfString, stdin);
     82:         printf ("size of [%d] = %d\n", string, sizeOfString);
     83:     }

# 6 0x0045B66A in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:23:

     21:     char* text[4] = {};
     22: 
=>   23:     fillingArrOfPtr(text, 4);
     24:     printArrOfPtr(text, 4);
     25:     reverseArrOfPtr(text, 4);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 11 2025 19:41:31, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 11 2025 19:41:39

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x7793BF67 в функции RtlFormatCurrentUserKeyPath(). Попытка прочесть данные по адресу 0x00000014 в модуле C:\WINDOWS\SYSTEM32\ntdll.dll. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057C65C (32-bit), Flags: Cmdre0, Thread: 0x345C (Main), GetLastError(): 126 (Не найден указанный модуль). 

--------------------------------------------------
Стек вызовов:

# 0 0x7793BF67 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlFormatCurrentUserKeyPath()
# 1 0x77992F10 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlTestBit()
# 2 0x77965382 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlReAllocateHeap()
# 3 0x771B8E6F in C:\WINDOWS\System32\msvcrt.dll: realloc()

# 4 0x0042DDDF in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:130:

    128:         if (charactersCount == *n) {
    129:             *n *= 2;
=>  130:             *lineptr = (char*)realloc(*lineptr, *n);
    131:         }
    132: 

# 5 0x0045CDEA in C:\Users\Admin\Desktop\Strings\Strings.exe: fillingArrOfPtr() at C:/Users/Admin/Desktop/Strings/arrayFunctions.cpp:81:

     79:     for (size_t string = 0; string < numOfPtr; string++) {
     80:         size_t sizeOfString = 1;
=>   81:         myGetline(&(arrayOfPtr[string]), &sizeOfString, stdin);
     82:         printf ("size of [%d] = %d\n", string, sizeOfString);
     83:     }

# 6 0x0045B66A in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:23:

     21:     char* text[4] = {};
     22: 
=>   23:     fillingArrOfPtr(text, 4);
     24:     printArrOfPtr(text, 4);
     25:     //reverseArrOfPtr(text, 4);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 11 2025 19:44:38, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 11 2025 19:44:44

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: signal (11, 0x00): SIGSEGV: Доступ по неверному указателю. Ставьте ассерты! 

Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x7793BF67 в функции RtlFormatCurrentUserKeyPath(). Попытка прочесть данные по адресу 0x00000014 в модуле C:\WINDOWS\SYSTEM32\ntdll.dll. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции signal() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057C65C (32-bit), Flags: Cmdre0, Thread: 0x345C (Main), GetLastError(): 126 (Не найден указанный модуль). 

--------------------------------------------------
Стек вызовов:

# 0 0x7793BF67 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlFormatCurrentUserKeyPath()
# 1 0x77992F10 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlTestBit()
# 2 0x77965382 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlReAllocateHeap()
# 3 0x771B8E6F in C:\WINDOWS\System32\msvcrt.dll: realloc()

# 4 0x0042DDDF in C:\Users\Admin\Desktop\Strings\Strings.exe: myGetline() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:130:

    128:         if (charactersCount == *n) {
    129:             *n *= 2;
=>  130:             *lineptr = (char*)realloc(*lineptr, *n);
    131:         }
    132: 

# 5 0x0045CDEA in C:\Users\Admin\Desktop\Strings\Strings.exe: fillingArrOfPtr() at C:/Users/Admin/Desktop/Strings/arrayFunctions.cpp:81:

     79:     for (size_t string = 0; string < numOfPtr; string++) {
     80:         size_t sizeOfString = 1;
=>   81:         myGetline(&(arrayOfPtr[string]), &sizeOfString, stdin);
     82:         printf ("size of [%d] = %d\n", string, sizeOfString);
     83:     }

# 6 0x0045B66A in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:23:

     21:     char* text[4] = {};
     22: 
=>   23:     fillingArrOfPtr(text, 4);
     24:     printArrOfPtr(text, 4);
     25:     //reverseArrOfPtr(text, 4);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 11 2025 19:44:38, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 11 2025 19:44:44

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: signal (22, 0x00): SIGABRT: Аварийное завершение программы, вызвана функция abort(). 

С помощью функции signal() вы можете сами обработать эту ошибку.

#1: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057C65C (32-bit), Flags: Cmdre0, Thread: 0x491C (Main), errno: 22 (Invalid argument). 

--------------------------------------------------
Стек вызовов:

# 0 0x0043FD18 in C:\Users\Admin\Desktop\Strings\Strings.exe: (anonymous namespace)::TX::_txOnSignal() at c:/users/admin/downloads/codeblocks/mingw/include/txlib.h:11173
# 1 0x77978F03 in C:\WINDOWS\System32\msvcrt.dll: raise()
# 2 0x7797D3CB in C:\WINDOWS\System32\msvcrt.dll: abort()
# 3 0x77979D47 in C:\WINDOWS\System32\msvcrt.dll: assert()

# 4 0x0042D8E0 in C:\Users\Admin\Desktop\Strings\Strings.exe: myPuts() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:9:

      7: 
      8: int myPuts(const char* str) {
=>    9:     assert (str != NULL);
     10: 
     11:     int returnableValue = 0;

# 5 0x0045D0A6 in C:\Users\Admin\Desktop\Strings\Strings.exe: printSquareStringArr()

# 6 0x0045B6D9 in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:15:

     13:     FILE* file = fopen("RuslanAndLudmila.txt", "r");
     14:     getSquareStringArr((char**)text, 37, 30, file);
=>   15:     printSquareStringArr((char**)text, 37);
     16:     fclose(file);
     17: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 12 2025 19:45:00, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 12 2025 19:48:08

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: signal (22, 0x00): SIGABRT: Аварийное завершение программы, вызвана функция abort(). 

С помощью функции signal() вы можете сами обработать эту ошибку.

#1: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057C65C (32-bit), Flags: Cmdre0, Thread: 0x302C (Main), errno: 22 (Invalid argument). 

--------------------------------------------------
Стек вызовов:

# 0 0x0043FD18 in C:\Users\Admin\Desktop\Strings\Strings.exe: (anonymous namespace)::TX::_txOnSignal() at c:/users/admin/downloads/codeblocks/mingw/include/txlib.h:11173
# 1 0x77978F03 in C:\WINDOWS\System32\msvcrt.dll: raise()
# 2 0x7797D3CB in C:\WINDOWS\System32\msvcrt.dll: abort()
# 3 0x77979D47 in C:\WINDOWS\System32\msvcrt.dll: assert()

# 4 0x0042D8E0 in C:\Users\Admin\Desktop\Strings\Strings.exe: myPuts() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:9:

      7: 
      8: int myPuts(const char* str) {
=>    9:     assert (str != NULL);
     10: 
     11:     int returnableValue = 0;

# 5 0x0045D0A6 in C:\Users\Admin\Desktop\Strings\Strings.exe: printSquareStringArr()

# 6 0x0045B6D9 in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:15:

     13:     FILE* file = fopen("RuslanAndLudmila.txt", "r");
     14:     getSquareStringArr((char**)text, 37, 30, file);
=>   15:     printSquareStringArr((char**)text, 37);
     16:     fclose(file);
     17: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 12 2025 19:57:42, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 12 2025 19:58:17

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: signal (22, 0x00): SIGABRT: Аварийное завершение программы, вызвана функция abort(). 

С помощью функции signal() вы можете сами обработать эту ошибку.

#1: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057C65C (32-bit), Flags: Cmdre0, Thread: 0x3334 (Main), errno: 22 (Invalid argument). 

--------------------------------------------------
Стек вызовов:

# 0 0x0043FD18 in C:\Users\Admin\Desktop\Strings\Strings.exe: (anonymous namespace)::TX::_txOnSignal() at c:/users/admin/downloads/codeblocks/mingw/include/txlib.h:11173
# 1 0x77978F03 in C:\WINDOWS\System32\msvcrt.dll: raise()
# 2 0x7797D3CB in C:\WINDOWS\System32\msvcrt.dll: abort()
# 3 0x77979D47 in C:\WINDOWS\System32\msvcrt.dll: assert()

# 4 0x0042D8E0 in C:\Users\Admin\Desktop\Strings\Strings.exe: myPuts() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:9:

      7: 
      8: int myPuts(const char* str) {
=>    9:     assert (str != NULL);
     10: 
     11:     int returnableValue = 0;

# 5 0x0045D0A6 in C:\Users\Admin\Desktop\Strings\Strings.exe: printSquareStringArr()

# 6 0x0045B6D9 in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:15:

     13:     FILE* file = fopen("RuslanAndLudmila.txt", "r");
     14:     getSquareStringArr((char**)text, 37, 30, file);
=>   15:     printSquareStringArr((char**)text, 37);
     16:     fclose(file);
     17: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 12 2025 19:58:37, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 12 2025 20:01:01

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: signal (22, 0x00): SIGABRT: Аварийное завершение программы, вызвана функция abort(). 

С помощью функции signal() вы можете сами обработать эту ошибку.

#1: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057C65C (32-bit), Flags: Cmdre0, Thread: 0x5FC0 (Main), GetLastError(): 2 (Не удается найти указанный файл), errno: 2 (No such file or directory), _doserrno: 2 (No such file or directory). 

--------------------------------------------------
Стек вызовов:

# 0 0x0043FD18 in C:\Users\Admin\Desktop\Strings\Strings.exe: (anonymous namespace)::TX::_txOnSignal() at c:/users/admin/downloads/codeblocks/mingw/include/txlib.h:11173
# 1 0x77978F03 in C:\WINDOWS\System32\msvcrt.dll: raise()
# 2 0x7797D3CB in C:\WINDOWS\System32\msvcrt.dll: abort()
# 3 0x77979D47 in C:\WINDOWS\System32\msvcrt.dll: assert()
# 4 0x0045D062 in C:\Users\Admin\Desktop\Strings\Strings.exe: getSquareStringArr()

# 5 0x0045B6C5 in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:14:

     12:     char text[37][30] = {};
     13:     FILE* file = fopen("RuslanAndLudmil.txt", "r");
=>   14:     getSquareStringArr((char**)text, 37, 30, file);
     15:     puts(text[0]);
     16:     puts(text[1]);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 12 2025 20:12:25, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 12 2025 20:12:37

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042E2F5 в функции swapStringContents() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 220. Попытка записать данные по адресу NULL в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057C65C (32-bit), Flags: Cmdre0, Thread: 0x6CD8 (Main). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042E2F5 in C:\Users\Admin\Desktop\Strings\Strings.exe: swapStringContents() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:220:

    218:     str1 = {};
    219:     for(size_t i = 0; i <= sizeOfFirstStr; i++)
=>  220:         str1[i] = str2[i];
    221: 
    222:     str2 = {};

# 1 0x0045BBD4 in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:18:

     16:     getSquareStringArr(text, 270, 40, file);
     17:     printSquareStringArr(text, 270);
=>   18:     swapStringContents(text[1], text[2]);
     19:     printSquareStringArr(text, 270);
     20:     fclose(file);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 14 2025 15:28:44, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 14 2025 15:28:51

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: signal (11, 0x00): SIGSEGV: Доступ по неверному указателю. Ставьте ассерты! 

Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042E2F5 в функции swapStringContents() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 220. Попытка записать данные по адресу NULL в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции signal() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057C65C (32-bit), Flags: Cmdre0, Thread: 0x6CD8 (Main). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042E2F5 in C:\Users\Admin\Desktop\Strings\Strings.exe: swapStringContents() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:220:

    218:     str1 = {};
    219:     for(size_t i = 0; i <= sizeOfFirstStr; i++)
=>  220:         str1[i] = str2[i];
    221: 
    222:     str2 = {};

# 1 0x0045BBD4 in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:18:

     16:     getSquareStringArr(text, 270, 40, file);
     17:     printSquareStringArr(text, 270);
=>   18:     swapStringContents(text[1], text[2]);
     19:     printSquareStringArr(text, 270);
     20:     fclose(file);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 14 2025 15:28:44, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 14 2025 15:28:51

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: signal (22, 0x00): SIGABRT: Аварийное завершение программы, вызвана функция abort(). 

С помощью функции signal() вы можете сами обработать эту ошибку.

#1: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057C65C (32-bit), Flags: Cmdre0, Thread: 0x31A8 (Main), GetLastError(): 126 (Не найден указанный модуль). 

--------------------------------------------------
Стек вызовов:

# 0 0x00440240 in C:\Users\Admin\Desktop\Strings\Strings.exe: (anonymous namespace)::TX::_txOnSignal() at c:/users/admin/downloads/codeblocks/mingw/include/txlib.h:11173
# 1 0x77978F03 in C:\WINDOWS\System32\msvcrt.dll: raise()
# 2 0x7797D3CB in C:\WINDOWS\System32\msvcrt.dll: abort()
# 3 0x77979D47 in C:\WINDOWS\System32\msvcrt.dll: assert()

# 4 0x0042D8E0 in C:\Users\Admin\Desktop\Strings\Strings.exe: myPuts() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:10:

      8: 
      9: int myPuts(const char* str) {
=>   10:     assert (str != NULL);
     11: 
     12:     int returnableValue = 0;

# 5 0x0045D38D in C:\Users\Admin\Desktop\Strings\Strings.exe: printArrOfPtr() at C:/Users/Admin/Desktop/Strings/arrayFunctions.cpp:91:

     89:     for (size_t string = 0; string < numOfPtr; string++) {
     90:         printf ("[%d] = ", string);
=>   91:         myPuts(arrayOfPtr[string]);
     92:     }
     93: }

# 6 0x0045BBB6 in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:26:

     24:     for(int i = 0; i < 10; i++)
     25:         printf("[i] = %p\n", text[i]);
=>   26:     printArrOfPtr(text, 10);
     27: 
     28:     return 0;

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 14 2025 16:20:18, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 14 2025 16:20:24

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#31: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x77D31BFA в функции RtlReleaseSRWLockShared(). Попытка прочесть данные по адресу NULL в модуле C:\WINDOWS\SYSTEM32\ntdll.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Также превышен лимит фатальных исключений _TX_FATAL_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции _set_se_translator() вы можете сами обработать эту ошибку.

#4: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057C65C (32-bit), Flags: Cmdre0, Thread: 0x5C4 (Main), errno: 12 (Not enough space), _doserrno: 123 (Unknown error). 

--------------------------------------------------
Стек вызовов:

# 0 0x77D31BFA in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlReleaseSRWLockShared()
# 1 0x77D70993 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlGetSystemTimeAndBias()
# 2 0x77D1F7E9 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 3 0x77969151 in C:\WINDOWS\System32\msvcrt.dll: realloc()
# 4 0x7796880A in C:\WINDOWS\System32\msvcrt.dll: calloc()
# 5 0x565ED877 in c:\users\admin\downloads\codeblocks\mingw\include\Windows\MgwHelp32.dll: dwarf_object_finish()
# 6 0x77D70AC5 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlGetSystemTimeAndBias()
# 7 0x77D1F7E9 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 8 0x77969151 in C:\WINDOWS\System32\msvcrt.dll: realloc()
# 9 0x7796880A in C:\WINDOWS\System32\msvcrt.dll: calloc()
#10 0x5660EDEE in c:\users\admin\downloads\codeblocks\mingw\include\Windows\MgwHelp32.dll: dwarf_str_offsets_statistics()
#11 0x7796880A in C:\WINDOWS\System32\msvcrt.dll: calloc()
#12 0x565D4BCE in c:\users\admin\downloads\codeblocks\mingw\include\Windows\MgwHelp32.dll: dwarf_dealloc()

TXLib печалится: Нет информации об исходных файлах. Вы не забыли опцию -g при компиляции?

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 1 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

# 2 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 3 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 4 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

# 5 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 6 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 7 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

# 8 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 9 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#10 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#11 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#12 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#13 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#14 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#15 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#16 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#17 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#18 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#19 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#20 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#21 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#22 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#23 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#24 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#25 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#26 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#27 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#28 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#29 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#30 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#31 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#32 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#33 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#34 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#35 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#36 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#37 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#38 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#39 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#40 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#41 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#42 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#43 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#44 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#45 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#46 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#47 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#48 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#49 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#50 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#51 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#52 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#53 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#54 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#55 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#56 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#57 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#58 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#59 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#60 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#61 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 14 2025 16:46:40, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 14 2025 16:46:46

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#32: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x77D3244A в функции RtlReleaseSRWLockShared(). Попытка прочесть данные по адресу NULL в модуле C:\WINDOWS\SYSTEM32\ntdll.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Также превышен лимит фатальных исключений _TX_FATAL_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции _set_se_translator() вы можете сами обработать эту ошибку.

#5: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057C65C (32-bit), Flags: Cmdre0, Thread: 0x5C4 (Main), errno: 12 (Not enough space), _doserrno: 123 (Unknown error). 

--------------------------------------------------
Стек вызовов:

# 0 0x77D3244A in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlReleaseSRWLockShared()
# 1 0x77D70993 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlGetSystemTimeAndBias()
# 2 0x77D1F7E9 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 3 0x77968AC6 in C:\WINDOWS\System32\msvcrt.dll: malloc()
# 7 0x77D58FF6 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlIpv6AddressToStringA()
# 8 0x77D90B13 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlIsCurrentThreadAttachExempt()
# 9 0x77D1B11C in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlDeactivateActivationContextUnsafeFast()
#10 0x77D183AE in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlpCreateProcessRegistryInfo()
#11 0x77D17CA7 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlpCreateProcessRegistryInfo()
#12 0x77DFB06A in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlGetThreadErrorMode()
#13 0x77D295C8 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlIsCriticalSectionLockedByThread()
#14 0x77D1B308 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlDeactivateActivationContextUnsafeFast()
#15 0x77D192B2 in C:\WINDOWS\SYSTEM32\ntdll.dll: LdrControlFlowGuardEnforced()
#16 0x77D18DFD in C:\WINDOWS\SYSTEM32\ntdll.dll: LdrControlFlowGuardEnforced()
#17 0x77D205DB in C:\WINDOWS\SYSTEM32\ntdll.dll: LdrResolveDelayLoadedAPI()
#18 0x77AAFAAD in C:\WINDOWS\System32\gdi32full.dll: XLATEOBJ_piVector()
#19 0x77A36133 in C:\WINDOWS\System32\gdi32full.dll: StretchDIBits()
#20 0x77A2B802 in C:\WINDOWS\System32\gdi32full.dll: LpkDrawTextEx()
#21 0x772D5302 in C:\WINDOWS\System32\USER32.dll: DrawTextW()
#22 0x772D4F4D in C:\WINDOWS\System32\USER32.dll: DrawTextW()
#23 0x772D4BB1 in C:\WINDOWS\System32\USER32.dll: DrawTextW()
#24 0x77329562 in C:\WINDOWS\System32\USER32.dll: DrawStateW()
#25 0x7732B0D2 in C:\WINDOWS\System32\USER32.dll: SoftModalMessageBox()
#26 0x7732A1E2 in C:\WINDOWS\System32\USER32.dll: DrawStateW()
#27 0x7732ACE7 in C:\WINDOWS\System32\USER32.dll: MessageBoxTimeoutW()
#28 0x7732AD55 in C:\WINDOWS\System32\USER32.dll: MessageBoxW()
#29 0x0044A235 in C:\Users\Admin\Desktop\Strings\Strings.exe: _ZN12_GLOBAL__N_12TX12txMessageBoxEPKcS2_j()
#30 0x00449F91 in C:\Users\Admin\Desktop\Strings\Strings.exe: _ZN12_GLOBAL__N_12TX15_txProcessErrorEPKciS2_jS2_Pc()
#31 0x0043FD2A in C:\Users\Admin\Desktop\Strings\Strings.exe: _ZN12_GLOBAL__N_12TX8_txErrorEPKciS2_jS2_z()
#32 0x004415A0 in C:\Users\Admin\Desktop\Strings\Strings.exe: _ZN12_GLOBAL__N_12TX17_txOnExceptionSEHEP19_EXCEPTION_POINTERSPKc()
#33 0x00440B90 in C:\Users\Admin\Desktop\Strings\Strings.exe: _ZN12_GLOBAL__N_12TX27_txVectoredExceptionHandlerEP19_EXCEPTION_POINTERS@4()
#34 0x77D5369F in C:\WINDOWS\SYSTEM32\ntdll.dll: LdrSetDllManifestProber()
#35 0x77D4EB04 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlUnwind()
#36 0x77D5B66F in C:\WINDOWS\SYSTEM32\ntdll.dll: KiUserExceptionDispatcher()
#37 0x77D70993 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlGetSystemTimeAndBias()
#38 0x77D1F7E9 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlAllocateHeap()
#39 0x77969151 in C:\WINDOWS\System32\msvcrt.dll: realloc()
#40 0x7796880A in C:\WINDOWS\System32\msvcrt.dll: calloc()
#41 0x565ED877 in c:\users\admin\downloads\codeblocks\mingw\include\Windows\MgwHelp32.dll: dwarf_object_finish()
#42 0x77D70AC5 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlGetSystemTimeAndBias()
#43 0x77D1F7E9 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlAllocateHeap()
#44 0x77969151 in C:\WINDOWS\System32\msvcrt.dll: realloc()
#45 0x7796880A in C:\WINDOWS\System32\msvcrt.dll: calloc()
#46 0x5660EDEE in c:\users\admin\downloads\codeblocks\mingw\include\Windows\MgwHelp32.dll: dwarf_str_offsets_statistics()
#47 0x7796880A in C:\WINDOWS\System32\msvcrt.dll: calloc()
#48 0x565D4BCE in c:\users\admin\downloads\codeblocks\mingw\include\Windows\MgwHelp32.dll: dwarf_dealloc()

TXLib печалится: Нет информации об исходных файлах. Вы не забыли опцию -g при компиляции?

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txMessageBox(const char*, const char*, unsigned int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12910:

  12908: 
  12909: $   HWND wnd = _txCanvas_Window;
=>12910: $   int  ret = MessageBoxW ((wnd && IsWindowVisible (wnd))? wnd : _TX_CALL (Win32::GetConsoleWindow,()),
  12911:                             textW, headerW, flags | MB_SETFOREGROUND | MB_TOPMOST);
  12912: 

# 1 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 2 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

# 3 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 4 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 5 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

# 6 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 7 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 8 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

# 9 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#10 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#11 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#12 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#13 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#14 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#15 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#16 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#17 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#18 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#19 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#20 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#21 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#22 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#23 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#24 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#25 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#26 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#27 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#28 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#29 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#30 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#31 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#32 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#33 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#34 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#35 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#36 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#37 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#38 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#39 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#40 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#41 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#42 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#43 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#44 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#45 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#46 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#47 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#48 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#49 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#50 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#51 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#52 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#53 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#54 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#55 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#56 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#57 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#58 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#59 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#60 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#61 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 14 2025 16:46:40, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 14 2025 16:46:46

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: signal (11, 0x00): SIGSEGV: Доступ по неверному указателю. Ставьте ассерты! 

Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042DD22 в функции myStrdup(). Попытка записать данные по адресу NULL в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции signal() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057C65C (32-bit), Flags: Cmdre0, Thread: 0x5C4 (Main), GetLastError(): 8 (Недостаточно ресурсов памяти для обработки этой команды), errno: 12 (Not enough space). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042DD22 in C:\Users\Admin\Desktop\Strings\Strings.exe: myStrdup()
# 1 0x0045D75B in C:\Users\Admin\Desktop\Strings\Strings.exe: goodGetArrOfPtr()
# 2 0x0045BB90 in C:\Users\Admin\Desktop\Strings\Strings.exe: main()

TXLib печалится: Нет информации об исходных файлах. Вы не забыли опцию -g при компиляции?

--------------------------------------------------
TXLib предупреждает:

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#50: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x77D3244A в функции RtlReleaseSRWLockShared(). Попытка прочесть данные по адресу NULL в модуле C:\WINDOWS\SYSTEM32\ntdll.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Также превышен лимит фатальных исключений _TX_FATAL_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#2: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057C65C (32-bit), Flags: Cmdre0, Thread: 0x6E4C (Main). 

--------------------------------------------------
Стек вызовов:

# 0 0x77D3244A in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlReleaseSRWLockShared()
# 1 0x77D70993 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlGetSystemTimeAndBias()
# 2 0x77D1F7E9 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 3 0x77968AC6 in C:\WINDOWS\System32\msvcrt.dll: malloc()
# 4 0x64ADC60E in c:\users\admin\downloads\codeblocks\mingw\include\Windows\MgwHelp32.dll: dwarf_set_harmless_error_list_size()
# 5 0x64ADF1B8 in c:\users\admin\downloads\codeblocks\mingw\include\Windows\MgwHelp32.dll: dwarf_object_init_b()

TXLib печалится: Нет информации об исходных файлах. Вы не забыли опцию -g при компиляции?

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 1 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

# 2 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 3 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 4 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

# 5 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 6 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 7 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

# 8 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 9 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#10 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#11 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#12 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#13 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#14 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#15 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#16 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#17 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#18 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#19 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#20 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#21 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#22 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#23 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#24 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#25 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#26 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#27 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#28 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#29 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#30 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#31 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#32 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#33 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#34 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#35 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#36 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#37 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#38 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#39 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#40 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#41 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#42 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#43 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#44 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#45 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#46 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#47 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#48 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#49 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#50 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#51 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#52 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#53 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#54 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#55 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#56 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#57 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#58 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#59 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#60 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#61 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 14 2025 18:24:56, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 14 2025 18:25:01

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#68: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x77D31BFA в функции RtlReleaseSRWLockShared(). Попытка прочесть данные по адресу NULL в модуле C:\WINDOWS\SYSTEM32\ntdll.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Также превышен лимит фатальных исключений _TX_FATAL_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции _set_se_translator() вы можете сами обработать эту ошибку.

#4: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057C65C (32-bit), Flags: Cmdre0, Thread: 0x6E4C (Main). 

--------------------------------------------------
Стек вызовов:

# 0 0x77D31BFA in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlReleaseSRWLockShared()
# 1 0x77D70993 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlGetSystemTimeAndBias()
# 2 0x77D1F7E9 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlAllocateHeap()
# 3 0x77968AC6 in C:\WINDOWS\System32\msvcrt.dll: malloc()
# 4 0x77968B3B in C:\WINDOWS\System32\msvcrt.dll: realloc()
# 5 0x64B0A274 in c:\users\admin\downloads\codeblocks\mingw\include\Windows\MgwHelp32.dll: dwarf_dealloc_fde_cie_list()
# 6 0x64B18773 in c:\users\admin\downloads\codeblocks\mingw\include\Windows\MgwHelp32.dll: dwarf_dealloc_fde_cie_list()
# 7 0x64AC39DD in c:\users\admin\downloads\codeblocks\mingw\include\Windows\MgwHelp32.dll: SymFromAddr()
# 8 0x00446A22 in C:\Users\Admin\Desktop\Strings\Strings.exe: (anonymous namespace)::TX::_txCaptureStackBackTrace()

TXLib печалится: Нет информации об исходных файлах. Вы не забыли опцию -g при компиляции?

--------------------------------------------------
Стек вызовов TX:

# 0 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 1 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

# 2 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 3 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 4 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

# 5 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 6 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 7 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

# 8 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 9 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#10 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#11 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#12 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#13 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#14 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#15 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#16 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#17 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#18 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#19 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#20 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#21 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#22 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#23 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#24 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#25 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#26 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#27 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#28 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#29 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#30 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#31 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#32 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#33 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#34 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#35 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#36 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#37 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#38 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#39 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#40 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#41 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#42 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#43 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#44 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#45 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#46 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#47 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#48 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#49 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#50 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#51 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:10610:

  10608:         {
  10609: $       setlocale (LC_ALL,     locale);
=>10610: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10611:         }
  10612: 

#52 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#53 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#54 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#55 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#56 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#57 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#58 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#59 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#60 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#61 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 14 2025 18:24:56, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 14 2025 18:25:01

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: Исключение С++, вызванное оператором throw.

#69: Исключение EXCEPTION_CPP_MSC (0xE06D7363) при выполнении кода по адресу 0x75B43874 в функции RaiseException() в модуле C:\WINDOWS\System32\KERNELBASE.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Также превышен лимит фатальных исключений _TX_FATAL_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

Ой, всё (EXCEPTION_NONCONTINUABLE).

#5: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057C65C (32-bit), Flags: Cmdre0, Thread: 0x6E4C (Main), GetLastError(): 8 (Недостаточно ресурсов памяти для обработки этой команды), errno: 12 (Not enough space). 

--------------------------------------------------
Стек вызовов:

# 0 0x75B43874 in C:\WINDOWS\System32\KERNELBASE.dll: RaiseException()
# 1 0x7795B34D in C:\WINDOWS\System32\msvcrt.dll: CxxThrowException()
#12 0x772747F3 in C:\WINDOWS\System32\IMM32.dll: ImmGetCandidateWindow()
#13 0x772729AC in C:\WINDOWS\System32\IMM32.dll: ImmDisableIME()
#14 0x772741CD in C:\WINDOWS\System32\IMM32.dll: ImmGetContext()
#15 0x772737B6 in C:\WINDOWS\System32\IMM32.dll: ImmSetActiveContext()
#16 0x772C3A52 in C:\WINDOWS\System32\USER32.dll: IsChild()
#17 0x772C45F5 in C:\WINDOWS\System32\USER32.dll: SendDlgItemMessageW()
#18 0x772C413E in C:\WINDOWS\System32\USER32.dll: SendDlgItemMessageW()
#19 0x772C3DBE in C:\WINDOWS\System32\USER32.dll: SendDlgItemMessageW()
#20 0x772D9A73 in C:\WINDOWS\System32\USER32.dll: Ordinal2713()
#21 0x772C7BED in C:\WINDOWS\System32\USER32.dll: MsgWaitForMultipleObjectsEx()
#22 0x772C7690 in C:\WINDOWS\System32\USER32.dll: MsgWaitForMultipleObjectsEx()
#23 0x772D3EF9 in C:\WINDOWS\System32\USER32.dll: SystemParametersInfoW()
#24 0x77D5B646 in C:\WINDOWS\SYSTEM32\ntdll.dll: KiUserCallbackDispatcher()
#25 0x772D9A73 in C:\WINDOWS\System32\USER32.dll: Ordinal2713()
#26 0x772C67DF in C:\WINDOWS\System32\USER32.dll: GetPropW()
#27 0x772C5754 in C:\WINDOWS\System32\USER32.dll: GetPropW()
#28 0x772C55AE in C:\WINDOWS\System32\USER32.dll: GetPropW()
#29 0x772D9A73 in C:\WINDOWS\System32\USER32.dll: Ordinal2713()
#30 0x772C7BED in C:\WINDOWS\System32\USER32.dll: MsgWaitForMultipleObjectsEx()
#31 0x772C8D4C in C:\WINDOWS\System32\USER32.dll: GetWindowLongW()
#32 0x772CEC0C in C:\WINDOWS\System32\USER32.dll: EnumThreadWindows()
#33 0x7730A7BF in C:\WINDOWS\System32\USER32.dll: EndDialog()
#34 0x7732B453 in C:\WINDOWS\System32\USER32.dll: SoftModalMessageBox()
#35 0x7732A1E2 in C:\WINDOWS\System32\USER32.dll: DrawStateW()
#36 0x7732ACE7 in C:\WINDOWS\System32\USER32.dll: MessageBoxTimeoutW()
#37 0x7732AD55 in C:\WINDOWS\System32\USER32.dll: MessageBoxW()
#38 0x0044A235 in C:\Users\Admin\Desktop\Strings\Strings.exe: (anonymous namespace)::TX::txMessageBox()
#39 0x00449F91 in C:\Users\Admin\Desktop\Strings\Strings.exe: (anonymous namespace)::TX::_txProcessError()
#40 0x0043FD2A in C:\Users\Admin\Desktop\Strings\Strings.exe: (anonymous namespace)::TX::_txError()
#41 0x004415A0 in C:\Users\Admin\Desktop\Strings\Strings.exe: (anonymous namespace)::TX::_txOnExceptionSEH()
#42 0x00440B90 in C:\Users\Admin\Desktop\Strings\Strings.exe: (anonymous namespace)::TX::_txVectoredExceptionHandler()
#43 0x77D5369F in C:\WINDOWS\SYSTEM32\ntdll.dll: LdrSetDllManifestProber()
#44 0x77D4EB04 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlUnwind()
#45 0x77D5B66F in C:\WINDOWS\SYSTEM32\ntdll.dll: KiUserExceptionDispatcher()
#46 0x77D70993 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlGetSystemTimeAndBias()
#47 0x77D1F7E9 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlAllocateHeap()
#48 0x77968AC6 in C:\WINDOWS\System32\msvcrt.dll: malloc()
#49 0x77968B3B in C:\WINDOWS\System32\msvcrt.dll: realloc()
#50 0x64B0A274 in c:\users\admin\downloads\codeblocks\mingw\include\Windows\MgwHelp32.dll: dwarf_dealloc_fde_cie_list()
#51 0x64B18773 in c:\users\admin\downloads\codeblocks\mingw\include\Windows\MgwHelp32.dll: dwarf_dealloc_fde_cie_list()
#52 0x64AC39DD in c:\users\admin\downloads\codeblocks\mingw\include\Windows\MgwHelp32.dll: SymFromAddr()
#53 0x00446A22 in C:\Users\Admin\Desktop\Strings\Strings.exe: (anonymous namespace)::TX::_txCaptureStackBackTrace()

TXLib печалится: Нет информации об исходных файлах. Вы не забыли опцию -g при компиляции?

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txMessageBox(const char*, const char*, unsigned int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12910:

  12908: 
  12909: $   HWND wnd = _txCanvas_Window;
=>12910: $   int  ret = MessageBoxW ((wnd && IsWindowVisible (wnd))? wnd : _TX_CALL (Win32::GetConsoleWindow,()),
  12911:                             textW, headerW, flags | MB_SETFOREGROUND | MB_TOPMOST);
  12912: 

# 1 in const char* {anonymous}::TX::_txProcessError(const char*, int, const char*, unsigned int, const char*, va_list) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12746:

  12744: 
  12745:     if (stkTrace && strstr (stkTrace, ".exe: "))
=>12746:         {$ fprintf (stderr, "\n" "--------------------------------------------------\n"
  12747:                                  "Стек вызовов:\n\n"
  12748:                                  "%s\n\n"

# 2 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

# 3 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 4 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 5 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

# 6 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 7 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 8 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

# 9 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#10 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#11 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#12 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#13 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#14 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#15 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#16 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#17 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#18 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#19 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#20 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#21 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#22 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#23 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#24 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#25 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#26 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#27 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#28 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#29 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#30 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#31 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#32 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#33 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#34 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#35 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#36 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#37 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#38 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#39 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#40 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#41 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#42 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#43 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#44 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#45 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#46 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#47 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#48 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#49 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#50 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#51 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#52 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:10610:

  10608:         {
  10609: $       setlocale (LC_ALL,     locale);
=>10610: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10611:         }
  10612: 

#53 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#54 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#55 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#56 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#57 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#58 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#59 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#60 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#61 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 14 2025 18:24:56, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 14 2025 18:25:01

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: Исключение С++, вызванное оператором throw.

#69: Исключение EXCEPTION_CPP_MSC (0xE06D7363) при выполнении кода по адресу 0x75B43874 в функции RaiseException() в модуле C:\WINDOWS\System32\KERNELBASE.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Также превышен лимит фатальных исключений _TX_FATAL_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

Ой, всё (EXCEPTION_NONCONTINUABLE).

С помощью функции _set_se_translator() вы можете сами обработать эту ошибку.

#6: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057C65C (32-bit), Flags: Cmdre0, Thread: 0x6E4C (Main), GetLastError(): 8 (Недостаточно ресурсов памяти для обработки этой команды), errno: 12 (Not enough space). 

--------------------------------------------------
Стек вызовов:

# 0 0x75B43874 in C:\WINDOWS\System32\KERNELBASE.dll: RaiseException()
# 1 0x7795B34D in C:\WINDOWS\System32\msvcrt.dll: CxxThrowException()
#12 0x772747F3 in C:\WINDOWS\System32\IMM32.dll: ImmGetCandidateWindow()
#13 0x772729AC in C:\WINDOWS\System32\IMM32.dll: ImmDisableIME()
#14 0x772741CD in C:\WINDOWS\System32\IMM32.dll: ImmGetContext()
#15 0x772737B6 in C:\WINDOWS\System32\IMM32.dll: ImmSetActiveContext()
#16 0x772C3A52 in C:\WINDOWS\System32\USER32.dll: IsChild()
#17 0x772C45F5 in C:\WINDOWS\System32\USER32.dll: SendDlgItemMessageW()
#18 0x772C413E in C:\WINDOWS\System32\USER32.dll: SendDlgItemMessageW()
#19 0x772C3DBE in C:\WINDOWS\System32\USER32.dll: SendDlgItemMessageW()
#20 0x772D9A73 in C:\WINDOWS\System32\USER32.dll: Ordinal2713()
#21 0x772C7BED in C:\WINDOWS\System32\USER32.dll: MsgWaitForMultipleObjectsEx()
#22 0x772C7690 in C:\WINDOWS\System32\USER32.dll: MsgWaitForMultipleObjectsEx()
#23 0x772D3EF9 in C:\WINDOWS\System32\USER32.dll: SystemParametersInfoW()
#24 0x77D5B646 in C:\WINDOWS\SYSTEM32\ntdll.dll: KiUserCallbackDispatcher()
#25 0x772D9A73 in C:\WINDOWS\System32\USER32.dll: Ordinal2713()
#26 0x772C67DF in C:\WINDOWS\System32\USER32.dll: GetPropW()
#27 0x772C5754 in C:\WINDOWS\System32\USER32.dll: GetPropW()
#28 0x772C55AE in C:\WINDOWS\System32\USER32.dll: GetPropW()
#29 0x772D9A73 in C:\WINDOWS\System32\USER32.dll: Ordinal2713()
#30 0x772C7BED in C:\WINDOWS\System32\USER32.dll: MsgWaitForMultipleObjectsEx()
#31 0x772C8D4C in C:\WINDOWS\System32\USER32.dll: GetWindowLongW()
#32 0x772CEC0C in C:\WINDOWS\System32\USER32.dll: EnumThreadWindows()
#33 0x7730A7BF in C:\WINDOWS\System32\USER32.dll: EndDialog()
#34 0x7732B453 in C:\WINDOWS\System32\USER32.dll: SoftModalMessageBox()
#35 0x7732A1E2 in C:\WINDOWS\System32\USER32.dll: DrawStateW()
#36 0x7732ACE7 in C:\WINDOWS\System32\USER32.dll: MessageBoxTimeoutW()
#37 0x7732AD55 in C:\WINDOWS\System32\USER32.dll: MessageBoxW()
#38 0x0044A235 in C:\Users\Admin\Desktop\Strings\Strings.exe: (anonymous namespace)::TX::txMessageBox()
#39 0x00449F91 in C:\Users\Admin\Desktop\Strings\Strings.exe: (anonymous namespace)::TX::_txProcessError()
#40 0x0043FD2A in C:\Users\Admin\Desktop\Strings\Strings.exe: (anonymous namespace)::TX::_txError()
#41 0x004415A0 in C:\Users\Admin\Desktop\Strings\Strings.exe: (anonymous namespace)::TX::_txOnExceptionSEH()
#42 0x00440B90 in C:\Users\Admin\Desktop\Strings\Strings.exe: (anonymous namespace)::TX::_txVectoredExceptionHandler()
#43 0x77D5369F in C:\WINDOWS\SYSTEM32\ntdll.dll: LdrSetDllManifestProber()
#44 0x77D4EB04 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlUnwind()
#45 0x77D5B66F in C:\WINDOWS\SYSTEM32\ntdll.dll: KiUserExceptionDispatcher()
#46 0x77D70993 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlGetSystemTimeAndBias()
#47 0x77D1F7E9 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlAllocateHeap()
#48 0x77968AC6 in C:\WINDOWS\System32\msvcrt.dll: malloc()
#49 0x77968B3B in C:\WINDOWS\System32\msvcrt.dll: realloc()
#50 0x64B0A274 in c:\users\admin\downloads\codeblocks\mingw\include\Windows\MgwHelp32.dll: dwarf_dealloc_fde_cie_list()
#51 0x64B18773 in c:\users\admin\downloads\codeblocks\mingw\include\Windows\MgwHelp32.dll: dwarf_dealloc_fde_cie_list()
#52 0x64AC39DD in c:\users\admin\downloads\codeblocks\mingw\include\Windows\MgwHelp32.dll: SymFromAddr()
#53 0x00446A22 in C:\Users\Admin\Desktop\Strings\Strings.exe: (anonymous namespace)::TX::_txCaptureStackBackTrace()

TXLib печалится: Нет информации об исходных файлах. Вы не забыли опцию -g при компиляции?

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txMessageBox(const char*, const char*, unsigned int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12910:

  12908: 
  12909: $   HWND wnd = _txCanvas_Window;
=>12910: $   int  ret = MessageBoxW ((wnd && IsWindowVisible (wnd))? wnd : _TX_CALL (Win32::GetConsoleWindow,()),
  12911:                             textW, headerW, flags | MB_SETFOREGROUND | MB_TOPMOST);
  12912: 

# 1 in const char* {anonymous}::TX::_txProcessError(const char*, int, const char*, unsigned int, const char*, va_list) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12746:

  12744: 
  12745:     if (stkTrace && strstr (stkTrace, ".exe: "))
=>12746:         {$ fprintf (stderr, "\n" "--------------------------------------------------\n"
  12747:                                  "Стек вызовов:\n\n"
  12748:                                  "%s\n\n"

# 2 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

# 3 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 4 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 5 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

# 6 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 7 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 8 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

# 9 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#10 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#11 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#12 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#13 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#14 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#15 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#16 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#17 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#18 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#19 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#20 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#21 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#22 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#23 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#24 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#25 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#26 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#27 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#28 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#29 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#30 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#31 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#32 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#33 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#34 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#35 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#36 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#37 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#38 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#39 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#40 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#41 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#42 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#43 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#44 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#45 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#46 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#47 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#48 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#49 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#50 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#51 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#52 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:10610:

  10608:         {
  10609: $       setlocale (LC_ALL,     locale);
=>10610: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10611:         }
  10612: 

#53 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#54 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#55 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#56 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#57 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#58 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#59 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#60 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#61 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 14 2025 18:24:56, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 14 2025 18:25:01

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: Исключение С++, вызванное оператором throw.

#70: Исключение EXCEPTION_CPP_MSC (0xE06D7363) при выполнении кода по адресу 0x75B43874 в функции RaiseException() в модуле C:\WINDOWS\System32\KERNELBASE.dll. Дополнительно, превышен лимит исключений _TX_EXCEPTIONS_LIMIT (16). Также превышен лимит фатальных исключений _TX_FATAL_EXCEPTIONS_LIMIT (16). Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

Ой, всё (EXCEPTION_NONCONTINUABLE).

С помощью функции _set_se_translator() вы можете сами обработать эту ошибку.

#7: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x0057C65C (32-bit), Flags: Cmdre0, Thread: 0x6E4C (Main), GetLastError(): 8 (Недостаточно ресурсов памяти для обработки этой команды), errno: 12 (Not enough space). 

--------------------------------------------------
Стек вызовов:

# 0 0x75B43874 in C:\WINDOWS\System32\KERNELBASE.dll: RaiseException()
# 1 0x7795B34D in C:\WINDOWS\System32\msvcrt.dll: CxxThrowException()
#13 0x7727380E in C:\WINDOWS\System32\IMM32.dll: ImmSetActiveContext()
#14 0x772C3A52 in C:\WINDOWS\System32\USER32.dll: IsChild()
#15 0x772C45F5 in C:\WINDOWS\System32\USER32.dll: SendDlgItemMessageW()
#16 0x772C413E in C:\WINDOWS\System32\USER32.dll: SendDlgItemMessageW()
#17 0x772C3DBE in C:\WINDOWS\System32\USER32.dll: SendDlgItemMessageW()
#18 0x772D9A73 in C:\WINDOWS\System32\USER32.dll: Ordinal2713()
#19 0x772C7BED in C:\WINDOWS\System32\USER32.dll: MsgWaitForMultipleObjectsEx()
#20 0x772C7690 in C:\WINDOWS\System32\USER32.dll: MsgWaitForMultipleObjectsEx()
#21 0x772D3EF9 in C:\WINDOWS\System32\USER32.dll: SystemParametersInfoW()
#22 0x77D5B646 in C:\WINDOWS\SYSTEM32\ntdll.dll: KiUserCallbackDispatcher()
#23 0x772D9A73 in C:\WINDOWS\System32\USER32.dll: Ordinal2713()
#24 0x772C67DF in C:\WINDOWS\System32\USER32.dll: GetPropW()
#25 0x772C5754 in C:\WINDOWS\System32\USER32.dll: GetPropW()
#26 0x772C55AE in C:\WINDOWS\System32\USER32.dll: GetPropW()
#27 0x772D9A73 in C:\WINDOWS\System32\USER32.dll: Ordinal2713()
#28 0x772C7BED in C:\WINDOWS\System32\USER32.dll: MsgWaitForMultipleObjectsEx()
#29 0x772C8D4C in C:\WINDOWS\System32\USER32.dll: GetWindowLongW()
#30 0x772CEC0C in C:\WINDOWS\System32\USER32.dll: EnumThreadWindows()
#31 0x7730A7BF in C:\WINDOWS\System32\USER32.dll: EndDialog()
#32 0x7732B453 in C:\WINDOWS\System32\USER32.dll: SoftModalMessageBox()
#33 0x7732A1E2 in C:\WINDOWS\System32\USER32.dll: DrawStateW()
#34 0x7732ACE7 in C:\WINDOWS\System32\USER32.dll: MessageBoxTimeoutW()
#35 0x7732AD55 in C:\WINDOWS\System32\USER32.dll: MessageBoxW()
#36 0x0044A235 in C:\Users\Admin\Desktop\Strings\Strings.exe: (anonymous namespace)::TX::txMessageBox()
#37 0x00449F91 in C:\Users\Admin\Desktop\Strings\Strings.exe: (anonymous namespace)::TX::_txProcessError()
#38 0x0043FD2A in C:\Users\Admin\Desktop\Strings\Strings.exe: (anonymous namespace)::TX::_txError()
#39 0x004415A0 in C:\Users\Admin\Desktop\Strings\Strings.exe: (anonymous namespace)::TX::_txOnExceptionSEH()
#40 0x00440B90 in C:\Users\Admin\Desktop\Strings\Strings.exe: (anonymous namespace)::TX::_txVectoredExceptionHandler()
#41 0x77D5369F in C:\WINDOWS\SYSTEM32\ntdll.dll: LdrSetDllManifestProber()
#42 0x77D4EB04 in C:\WINDOWS\SYSTEM32\ntdll.dll: RtlUnwind()
#43 0x77D5B66F in C:\WINDOWS\SYSTEM32\ntdll.dll: KiUserExceptionDispatcher()
#44 0x7795B34D in C:\WINDOWS\System32\msvcrt.dll: CxxThrowException()
#55 0x772747F3 in C:\WINDOWS\System32\IMM32.dll: ImmGetCandidateWindow()
#56 0x772729AC in C:\WINDOWS\System32\IMM32.dll: ImmDisableIME()
#57 0x772741CD in C:\WINDOWS\System32\IMM32.dll: ImmGetContext()
#58 0x772737B6 in C:\WINDOWS\System32\IMM32.dll: ImmSetActiveContext()
#59 0x772C3A52 in C:\WINDOWS\System32\USER32.dll: IsChild()
#60 0x772C45F5 in C:\WINDOWS\System32\USER32.dll: SendDlgItemMessageW()
#61 0x772C413E in C:\WINDOWS\System32\USER32.dll: SendDlgItemMessageW()

TXLib печалится: Нет информации об исходных файлах. Вы не забыли опцию -g при компиляции?

--------------------------------------------------
Стек вызовов TX:

# 0 in int {anonymous}::TX::txMessageBox(const char*, const char*, unsigned int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12910:

  12908: 
  12909: $   HWND wnd = _txCanvas_Window;
=>12910: $   int  ret = MessageBoxW ((wnd && IsWindowVisible (wnd))? wnd : _TX_CALL (Win32::GetConsoleWindow,()),
  12911:                             textW, headerW, flags | MB_SETFOREGROUND | MB_TOPMOST);
  12912: 

# 1 in const char* {anonymous}::TX::_txProcessError(const char*, int, const char*, unsigned int, const char*, va_list) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12746:

  12744: 
  12745:     if (stkTrace && strstr (stkTrace, ".exe: "))
=>12746:         {$ fprintf (stderr, "\n" "--------------------------------------------------\n"
  12747:                                  "Стек вызовов:\n\n"
  12748:                                  "%s\n\n"

# 2 in const char* {anonymous}::TX::_txProcessError(const char*, int, const char*, unsigned int, const char*, va_list) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12746:

  12744: 
  12745:     if (stkTrace && strstr (stkTrace, ".exe: "))
=>12746:         {$ fprintf (stderr, "\n" "--------------------------------------------------\n"
  12747:                                  "Стек вызовов:\n\n"
  12748:                                  "%s\n\n"

# 3 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

# 4 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 5 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 6 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

# 7 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

# 8 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

# 9 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#10 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#11 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#12 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#13 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#14 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#15 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#16 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#17 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#18 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#19 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#20 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#21 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#22 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#23 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#24 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#25 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#26 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#27 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#28 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#29 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#30 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#31 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#32 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#33 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#34 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#35 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#36 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#37 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#38 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#39 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#40 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#41 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#42 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#43 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#44 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#45 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#46 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#47 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#48 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#49 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#50 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#51 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#52 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#53 in int {anonymous}::TX::txSetLocale(int, const char*, const wchar_t*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:10610:

  10608:         {
  10609: $       setlocale (LC_ALL,     locale);
=>10610: $       setlocale (LC_NUMERIC, "C");              // Return to decimal point (3.14) instead of comma (3,14) in floating numbers
  10611:         }
  10612: 

#54 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#55 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#56 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#57 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#58 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

#59 in long int {anonymous}::TX::_txOnExceptionSEH(EXCEPTION_POINTERS*, const char*) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:11645:

  11643: $       unsigned err = GetLastError();
  11644: 
=>11645: $       const char* stackTrace = _txCaptureStackBackTrace (0, true, exc->ContextRecord, exc);
  11646: 
  11647: $       _txDumpExceptionSEH (_txDumpSE,  (intptr_t) sizeof (_txDumpSE)  - 1, exc->ExceptionRecord, func);

#60 in bool {anonymous}::TX::_txSymGetFromAddr(void*, {anonymous}::TX::Win32::SYMBOL_INFO**, {anonymous}::TX::Win32::IMAGEHLP_LINE64**, const char**, const char**, int) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12417:

  12415: $       unsigned long long ofs = 0;
  12416: 
=>12417: $       _TX_CALL (LIB_::SymFromAddr, (process, (uintptr_t) addr, &ofs, sym));
  12418: 
  12419:         if (strcmp (sym->Name, "??") == 0) {$ *sym->Name = 0; }

#61 in const char* {anonymous}::TX::_txCaptureStackBackTrace(int, bool, CONTEXT*, EXCEPTION_POINTERS*, HANDLE) at c:\users\admin\downloads\codeblocks\mingw\include\txlib.h:12152:

  12150: $       bool                    inTX   = false;
  12151: 
=>12152:         if (addr)                {$ inTX = _txSymGetFromAddr ((char*) addr - 1, &sym, &line, &module);          }
  12153:         if (readSource && !inTX) {$        _txSymGetFromAddr ((void*) 1,        NULL, NULL,  NULL, &source, 2); }  //-V566
  12154: 

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 14 2025 18:24:56, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 14 2025 18:25:01

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042D9E6 в функции myStrlen() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 43. Попытка прочесть данные по адресу 0xEE1D0905 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x005F1ADC (32-bit), Flags: Cmdre0, Thread: 0x70C0 (Main). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042D9E6 in C:\Users\Admin\Desktop\Strings\Strings.exe: myStrlen() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:43:

     41: 
     42:     size_t lengthOfString = 0;
=>   43:     for (int i = 0; (str[i] != '\0') && (str[i] != '\n'); i++)
     44:         lengthOfString++;
     45:     return lengthOfString;

# 1 0x0042E415 in C:\Users\Admin\Desktop\Strings\Strings.exe: myStrcmp2() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:254:

    252: 
    253:     size_t sizeOfFirstStr  = myStrlen(str1) + 1;
=>  254:     size_t sizeOfSecondStr = myStrlen(str2) + 1;
    255: 
    256:     while ((*firstStringCharPtr != '\0') && (*secondStringCharPtr != '\0') && (*firstStringCharPtr != '\n') && (*secondStringCharPtr != '\n')) {

# 2 0x0048B9B6 in C:\Users\Admin\Desktop\Strings\Strings.exe: stringsBubbleSort() at C:/Users/Admin/Desktop/Strings/sorts.cpp:26:

     24:     for(unsigned int numOfCycle = 0; numOfCycle < structAddress->numberOfStrings; numOfCycle++)
     25:         for (size_t numOfPtr = 0; numOfPtr < (structAddress->numberOfStrings - numOfCycle); numOfPtr++) {
=>   26:             if (myStrcmp2((structAddress->arrOfPtrsToStrings)[numOfPtr], (structAddress->arrOfPtrsToStrings)[numOfPtr + 1]) > 0) {
     27:                 char* cell = (structAddress->arrOfPtrsToStrings)[numOfPtr];
     28:                 (structAddress->arrOfPtrsToStrings)[numOfPtr] = (structAddress->arrOfPtrsToStrings)[numOfPtr + 1];

# 3 0x00489C4A in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:27:

     25:     }
     26: 
=>   27:     stringsBubbleSort(&Onegin);
     28:     for(size_t i = 0; i < Onegin.numberOfStrings; i++){
     29:         printf("[%d] == (", i);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 17 2025 18:28:11, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 17 2025 18:29:18

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: signal (11, 0x00): SIGSEGV: Доступ по неверному указателю. Ставьте ассерты! 

Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042D9E6 в функции myStrlen() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 43. Попытка прочесть данные по адресу 0xEE1D0905 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции signal() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x005F1ADC (32-bit), Flags: Cmdre0, Thread: 0x70C0 (Main). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042D9E6 in C:\Users\Admin\Desktop\Strings\Strings.exe: myStrlen() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:43:

     41: 
     42:     size_t lengthOfString = 0;
=>   43:     for (int i = 0; (str[i] != '\0') && (str[i] != '\n'); i++)
     44:         lengthOfString++;
     45:     return lengthOfString;

# 1 0x0042E415 in C:\Users\Admin\Desktop\Strings\Strings.exe: myStrcmp2() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:254:

    252: 
    253:     size_t sizeOfFirstStr  = myStrlen(str1) + 1;
=>  254:     size_t sizeOfSecondStr = myStrlen(str2) + 1;
    255: 
    256:     while ((*firstStringCharPtr != '\0') && (*secondStringCharPtr != '\0') && (*firstStringCharPtr != '\n') && (*secondStringCharPtr != '\n')) {

# 2 0x0048B9B6 in C:\Users\Admin\Desktop\Strings\Strings.exe: stringsBubbleSort() at C:/Users/Admin/Desktop/Strings/sorts.cpp:26:

     24:     for(unsigned int numOfCycle = 0; numOfCycle < structAddress->numberOfStrings; numOfCycle++)
     25:         for (size_t numOfPtr = 0; numOfPtr < (structAddress->numberOfStrings - numOfCycle); numOfPtr++) {
=>   26:             if (myStrcmp2((structAddress->arrOfPtrsToStrings)[numOfPtr], (structAddress->arrOfPtrsToStrings)[numOfPtr + 1]) > 0) {
     27:                 char* cell = (structAddress->arrOfPtrsToStrings)[numOfPtr];
     28:                 (structAddress->arrOfPtrsToStrings)[numOfPtr] = (structAddress->arrOfPtrsToStrings)[numOfPtr + 1];

# 3 0x00489C4A in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:27:

     25:     }
     26: 
=>   27:     stringsBubbleSort(&Onegin);
     28:     for(size_t i = 0; i < Onegin.numberOfStrings; i++){
     29:         printf("[%d] == (", i);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 17 2025 18:28:11, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 17 2025 18:29:18

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042D9E6 в функции myStrlen() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 43. Попытка прочесть данные по адресу 0x815D29DD в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x005F1ADC (32-bit), Flags: Cmdre0, Thread: 0x5F54 (Main). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042D9E6 in C:\Users\Admin\Desktop\Strings\Strings.exe: myStrlen() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:43:

     41: 
     42:     size_t lengthOfString = 0;
=>   43:     for (int i = 0; (str[i] != '\0') && (str[i] != '\n'); i++)
     44:         lengthOfString++;
     45:     return lengthOfString;

# 1 0x0042DEEC in C:\Users\Admin\Desktop\Strings\Strings.exe: myStrcmp() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:168:

    166: 
    167:     size_t sizeOfFirstStr  = myStrlen(str1) + 1;
=>  168:     size_t sizeOfSecondStr = myStrlen(str2) + 1;
    169: 
    170:     while ((str1[numOfChar1] != '\0') && (str2[numOfChar2] != '\0') && (str1[numOfChar1] != '\n') && (str2[numOfChar2] != '\n')) {

# 2 0x0048B9B6 in C:\Users\Admin\Desktop\Strings\Strings.exe: stringsBubbleSort() at C:/Users/Admin/Desktop/Strings/sorts.cpp:26:

     24:     for(unsigned int numOfCycle = 0; numOfCycle < structAddress->numberOfStrings; numOfCycle++)
     25:         for (size_t numOfPtr = 0; numOfPtr < (structAddress->numberOfStrings - numOfCycle); numOfPtr++) {
=>   26:             if (myStrcmp((structAddress->arrOfPtrsToStrings)[numOfPtr], (structAddress->arrOfPtrsToStrings)[numOfPtr + 1]) > 0) {
     27:                 char* cell = (structAddress->arrOfPtrsToStrings)[numOfPtr];
     28:                 (structAddress->arrOfPtrsToStrings)[numOfPtr] = (structAddress->arrOfPtrsToStrings)[numOfPtr + 1];

# 3 0x00489C4A in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:27:

     25:     }
     26: 
=>   27:     stringsBubbleSort(&Onegin);
     28:     for(size_t i = 0; i < Onegin.numberOfStrings; i++){
     29:         printf("[%d] == (", i);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 17 2025 18:28:11, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 17 2025 18:33:44

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: signal (11, 0x00): SIGSEGV: Доступ по неверному указателю. Ставьте ассерты! 

Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042D9E6 в функции myStrlen() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 43. Попытка прочесть данные по адресу 0x815D29DD в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции signal() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x005F1ADC (32-bit), Flags: Cmdre0, Thread: 0x5F54 (Main). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042D9E6 in C:\Users\Admin\Desktop\Strings\Strings.exe: myStrlen() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:43:

     41: 
     42:     size_t lengthOfString = 0;
=>   43:     for (int i = 0; (str[i] != '\0') && (str[i] != '\n'); i++)
     44:         lengthOfString++;
     45:     return lengthOfString;

# 1 0x0042DEEC in C:\Users\Admin\Desktop\Strings\Strings.exe: myStrcmp() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:168:

    166: 
    167:     size_t sizeOfFirstStr  = myStrlen(str1) + 1;
=>  168:     size_t sizeOfSecondStr = myStrlen(str2) + 1;
    169: 
    170:     while ((str1[numOfChar1] != '\0') && (str2[numOfChar2] != '\0') && (str1[numOfChar1] != '\n') && (str2[numOfChar2] != '\n')) {

# 2 0x0048B9B6 in C:\Users\Admin\Desktop\Strings\Strings.exe: stringsBubbleSort() at C:/Users/Admin/Desktop/Strings/sorts.cpp:26:

     24:     for(unsigned int numOfCycle = 0; numOfCycle < structAddress->numberOfStrings; numOfCycle++)
     25:         for (size_t numOfPtr = 0; numOfPtr < (structAddress->numberOfStrings - numOfCycle); numOfPtr++) {
=>   26:             if (myStrcmp((structAddress->arrOfPtrsToStrings)[numOfPtr], (structAddress->arrOfPtrsToStrings)[numOfPtr + 1]) > 0) {
     27:                 char* cell = (structAddress->arrOfPtrsToStrings)[numOfPtr];
     28:                 (structAddress->arrOfPtrsToStrings)[numOfPtr] = (structAddress->arrOfPtrsToStrings)[numOfPtr + 1];

# 3 0x00489C4A in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:27:

     25:     }
     26: 
=>   27:     stringsBubbleSort(&Onegin);
     28:     for(size_t i = 0; i < Onegin.numberOfStrings; i++){
     29:         printf("[%d] == (", i);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 17 2025 18:28:11, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 17 2025 18:33:44

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042D9E6 в функции myStrlen() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 43. Попытка прочесть данные по адресу 0x1AD6E349 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x005F1ADC (32-bit), Flags: Cmdre0, Thread: 0x4460 (Main). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042D9E6 in C:\Users\Admin\Desktop\Strings\Strings.exe: myStrlen() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:43:

     41: 
     42:     size_t lengthOfString = 0;
=>   43:     for (int i = 0; (str[i] != '\0') && (str[i] != '\n'); i++)
     44:         lengthOfString++;
     45:     return lengthOfString;

# 1 0x0042E415 in C:\Users\Admin\Desktop\Strings\Strings.exe: myStrcmp2() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:254:

    252: 
    253:     size_t sizeOfFirstStr  = myStrlen(str1) + 1;
=>  254:     size_t sizeOfSecondStr = myStrlen(str2) + 1;
    255: 
    256:     while ((*firstStringCharPtr != '\0') && (*secondStringCharPtr != '\0') && (*firstStringCharPtr != '\n') && (*secondStringCharPtr != '\n')) {

# 2 0x0048BA19 in C:\Users\Admin\Desktop\Strings\Strings.exe: stringsBubbleSort() at C:/Users/Admin/Desktop/Strings/sorts.cpp:28:

     26:             assert((structAddress->arrOfPtrsToStrings)[numOfPtr]);
     27:             assert((structAddress->arrOfPtrsToStrings)[numOfPtr + 1]);
=>   28:             if (myStrcmp2((structAddress->arrOfPtrsToStrings)[numOfPtr], (structAddress->arrOfPtrsToStrings)[numOfPtr + 1]) > 0) {
     29:                 char* cell = (structAddress->arrOfPtrsToStrings)[numOfPtr];
     30:                 (structAddress->arrOfPtrsToStrings)[numOfPtr] = (structAddress->arrOfPtrsToStrings)[numOfPtr + 1];

# 3 0x00489C4A in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:27:

     25:     }
     26: 
=>   27:     stringsBubbleSort(&Onegin);
     28:     for(size_t i = 0; i < Onegin.numberOfStrings; i++){
     29:         printf("[%d] == (", i);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 17 2025 18:35:19, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 17 2025 18:35:25

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: signal (11, 0x00): SIGSEGV: Доступ по неверному указателю. Ставьте ассерты! 

Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042D9E6 в функции myStrlen() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 43. Попытка прочесть данные по адресу 0x1AD6E349 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции signal() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x005F1ADC (32-bit), Flags: Cmdre0, Thread: 0x4460 (Main). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042D9E6 in C:\Users\Admin\Desktop\Strings\Strings.exe: myStrlen() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:43:

     41: 
     42:     size_t lengthOfString = 0;
=>   43:     for (int i = 0; (str[i] != '\0') && (str[i] != '\n'); i++)
     44:         lengthOfString++;
     45:     return lengthOfString;

# 1 0x0042E415 in C:\Users\Admin\Desktop\Strings\Strings.exe: myStrcmp2() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:254:

    252: 
    253:     size_t sizeOfFirstStr  = myStrlen(str1) + 1;
=>  254:     size_t sizeOfSecondStr = myStrlen(str2) + 1;
    255: 
    256:     while ((*firstStringCharPtr != '\0') && (*secondStringCharPtr != '\0') && (*firstStringCharPtr != '\n') && (*secondStringCharPtr != '\n')) {

# 2 0x0048BA19 in C:\Users\Admin\Desktop\Strings\Strings.exe: stringsBubbleSort() at C:/Users/Admin/Desktop/Strings/sorts.cpp:28:

     26:             assert((structAddress->arrOfPtrsToStrings)[numOfPtr]);
     27:             assert((structAddress->arrOfPtrsToStrings)[numOfPtr + 1]);
=>   28:             if (myStrcmp2((structAddress->arrOfPtrsToStrings)[numOfPtr], (structAddress->arrOfPtrsToStrings)[numOfPtr + 1]) > 0) {
     29:                 char* cell = (structAddress->arrOfPtrsToStrings)[numOfPtr];
     30:                 (structAddress->arrOfPtrsToStrings)[numOfPtr] = (structAddress->arrOfPtrsToStrings)[numOfPtr + 1];

# 3 0x00489C4A in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:27:

     25:     }
     26: 
=>   27:     stringsBubbleSort(&Onegin);
     28:     for(size_t i = 0; i < Onegin.numberOfStrings; i++){
     29:         printf("[%d] == (", i);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 17 2025 18:35:19, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 17 2025 18:35:25

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042D9E6 в функции myStrlen() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 43. Попытка прочесть данные по адресу 0x00FCA7C7 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x005F1ADC (32-bit), Flags: Cmdre0, Thread: 0x68F0 (Main). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042D9E6 in C:\Users\Admin\Desktop\Strings\Strings.exe: myStrlen() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:43:

     41: 
     42:     size_t lengthOfString = 0;
=>   43:     for (int i = 0; (str[i] != '\0') && (str[i] != '\n'); i++)
     44:         lengthOfString++;
     45:     return lengthOfString;

# 1 0x0042E415 in C:\Users\Admin\Desktop\Strings\Strings.exe: myStrcmp2() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:254:

    252: 
    253:     size_t sizeOfFirstStr  = myStrlen(str1) + 1;
=>  254:     size_t sizeOfSecondStr = myStrlen(str2) + 1;
    255: 
    256:     while ((*firstStringCharPtr != '\0') && (*secondStringCharPtr != '\0') && (*firstStringCharPtr != '\n') && (*secondStringCharPtr != '\n')) {

# 2 0x0048BA6A in C:\Users\Admin\Desktop\Strings\Strings.exe: stringsBubbleSort() at C:/Users/Admin/Desktop/Strings/sorts.cpp:30:

     28:             printf("(structAddress->arrOfPtrsToStrings)[%d] == %p\n", numOfPtr, (structAddress->arrOfPtrsToStrings)[numOfPtr]);
     29:             printf("(structAddress->arrOfPtrsToStrings)[%d + 1] == %p\n", numOfPtr, (structAddress->arrOfPtrsToStrings)[numOfPtr + 1]);
=>   30:             if (myStrcmp2((structAddress->arrOfPtrsToStrings)[numOfPtr], (structAddress->arrOfPtrsToStrings)[numOfPtr + 1]) > 0) {
     31:                 char* cell = (structAddress->arrOfPtrsToStrings)[numOfPtr];
     32:                 (structAddress->arrOfPtrsToStrings)[numOfPtr] = (structAddress->arrOfPtrsToStrings)[numOfPtr + 1];

# 3 0x00489C4A in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:27:

     25:     }
     26: 
=>   27:     stringsBubbleSort(&Onegin);
     28:     for(size_t i = 0; i < Onegin.numberOfStrings; i++){
     29:         printf("[%d] == (", i);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 17 2025 18:35:19, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 17 2025 18:38:44

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: signal (11, 0x00): SIGSEGV: Доступ по неверному указателю. Ставьте ассерты! 

Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0042D9E6 в функции myStrlen() в файле C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp на строке 43. Попытка прочесть данные по адресу 0x00FCA7C7 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции signal() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x005F1ADC (32-bit), Flags: Cmdre0, Thread: 0x68F0 (Main). 

--------------------------------------------------
Стек вызовов:

# 0 0x0042D9E6 in C:\Users\Admin\Desktop\Strings\Strings.exe: myStrlen() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:43:

     41: 
     42:     size_t lengthOfString = 0;
=>   43:     for (int i = 0; (str[i] != '\0') && (str[i] != '\n'); i++)
     44:         lengthOfString++;
     45:     return lengthOfString;

# 1 0x0042E415 in C:\Users\Admin\Desktop\Strings\Strings.exe: myStrcmp2() at C:/Users/Admin/Desktop/Strings/stringsFunctions.cpp:254:

    252: 
    253:     size_t sizeOfFirstStr  = myStrlen(str1) + 1;
=>  254:     size_t sizeOfSecondStr = myStrlen(str2) + 1;
    255: 
    256:     while ((*firstStringCharPtr != '\0') && (*secondStringCharPtr != '\0') && (*firstStringCharPtr != '\n') && (*secondStringCharPtr != '\n')) {

# 2 0x0048BA6A in C:\Users\Admin\Desktop\Strings\Strings.exe: stringsBubbleSort() at C:/Users/Admin/Desktop/Strings/sorts.cpp:30:

     28:             printf("(structAddress->arrOfPtrsToStrings)[%d] == %p\n", numOfPtr, (structAddress->arrOfPtrsToStrings)[numOfPtr]);
     29:             printf("(structAddress->arrOfPtrsToStrings)[%d + 1] == %p\n", numOfPtr, (structAddress->arrOfPtrsToStrings)[numOfPtr + 1]);
=>   30:             if (myStrcmp2((structAddress->arrOfPtrsToStrings)[numOfPtr], (structAddress->arrOfPtrsToStrings)[numOfPtr + 1]) > 0) {
     31:                 char* cell = (structAddress->arrOfPtrsToStrings)[numOfPtr];
     32:                 (structAddress->arrOfPtrsToStrings)[numOfPtr] = (structAddress->arrOfPtrsToStrings)[numOfPtr + 1];

# 3 0x00489C4A in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:27:

     25:     }
     26: 
=>   27:     stringsBubbleSort(&Onegin);
     28:     for(size_t i = 0; i < Onegin.numberOfStrings; i++){
     29:         printf("[%d] == (", i);

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 17 2025 18:35:19, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 17 2025 18:38:44

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0045C575 в функции getLengthOfStrings() в файле C:/Users/Admin/Desktop/Strings/bestOneginReader.cpp на строке 148. Попытка прочесть данные по адресу 0x00000008 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x005F1ADC (32-bit), Flags: Cmdre0, Thread: 0x2464 (Main). 

--------------------------------------------------
Стек вызовов:

# 0 0x0045C575 in C:\Users\Admin\Desktop\Strings\Strings.exe: getLengthOfStrings() at C:/Users/Admin/Desktop/Strings/bestOneginReader.cpp:148:

    146: 
    147:     for(size_t line = 0; line < structAddress->numberOfStrings - 1; line++)
=>  148:         (structAddress->arrOfStringStructs[line]).lengthOfString = (size_t)((structAddress->arrOfStringStructs[line+1]).ptrToString - (structAddress->arrOfStringStructs[line]).ptrToString);
    149: 
    150:     (structAddress->arrOfStringStructs[structAddress->numberOfStrings - 1]).lengthOfString = myStrlen((structAddress->arrOfStringStructs[structAddress->numberOfStrings - 1]).ptrToString) + 1;

# 1 0x0045C4DC in C:\Users\Admin\Desktop\Strings\Strings.exe: getArrOfStringStructs() at C:/Users/Admin/Desktop/Strings/bestOneginReader.cpp:140:

    138:         }
    139:     }
=>  140:     getLengthOfStrings(structAddress);
    141: 
    142: }

# 2 0x0045C3C1 in C:\Users\Admin\Desktop\Strings\Strings.exe: getStructNovel2() at C:/Users/Admin/Desktop/Strings/bestOneginReader.cpp:114:

    112:     structAddress->numberOfStrings    = numberOfStrings;
    113: 
=>  114:     getArrOfStringStructs(structAddress);
    115: 
    116: }

# 3 0x00489DF6 in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:19:

     17: 
     18:     struct novel Onegin = {};
=>   19:     getStructNovel2 (&Onegin,"OriginalOnegin.txt");
     20: 
     21:     for(size_t i = 0; i < Onegin.numberOfStrings; i++){

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 18 2025 00:24:43, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 18 2025 00:24:52

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: signal (11, 0x00): SIGSEGV: Доступ по неверному указателю. Ставьте ассерты! 

Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0045C575 в функции getLengthOfStrings() в файле C:/Users/Admin/Desktop/Strings/bestOneginReader.cpp на строке 148. Попытка прочесть данные по адресу 0x00000008 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции signal() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x005F1ADC (32-bit), Flags: Cmdre0, Thread: 0x2464 (Main). 

--------------------------------------------------
Стек вызовов:

# 0 0x0045C575 in C:\Users\Admin\Desktop\Strings\Strings.exe: getLengthOfStrings() at C:/Users/Admin/Desktop/Strings/bestOneginReader.cpp:148:

    146: 
    147:     for(size_t line = 0; line < structAddress->numberOfStrings - 1; line++)
=>  148:         (structAddress->arrOfStringStructs[line]).lengthOfString = (size_t)((structAddress->arrOfStringStructs[line+1]).ptrToString - (structAddress->arrOfStringStructs[line]).ptrToString);
    149: 
    150:     (structAddress->arrOfStringStructs[structAddress->numberOfStrings - 1]).lengthOfString = myStrlen((structAddress->arrOfStringStructs[structAddress->numberOfStrings - 1]).ptrToString) + 1;

# 1 0x0045C4DC in C:\Users\Admin\Desktop\Strings\Strings.exe: getArrOfStringStructs() at C:/Users/Admin/Desktop/Strings/bestOneginReader.cpp:140:

    138:         }
    139:     }
=>  140:     getLengthOfStrings(structAddress);
    141: 
    142: }

# 2 0x0045C3C1 in C:\Users\Admin\Desktop\Strings\Strings.exe: getStructNovel2() at C:/Users/Admin/Desktop/Strings/bestOneginReader.cpp:114:

    112:     structAddress->numberOfStrings    = numberOfStrings;
    113: 
=>  114:     getArrOfStringStructs(structAddress);
    115: 
    116: }

# 3 0x00489DF6 in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:19:

     17: 
     18:     struct novel Onegin = {};
=>   19:     getStructNovel2 (&Onegin,"OriginalOnegin.txt");
     20: 
     21:     for(size_t i = 0; i < Onegin.numberOfStrings; i++){

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 18 2025 00:24:43, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 18 2025 00:24:52

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0045C575 в функции getLengthOfStrings() в файле C:/Users/Admin/Desktop/Strings/bestOneginReader.cpp на строке 147. Попытка прочесть данные по адресу 0x00000008 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x005F1ADC (32-bit), Flags: Cmdre0, Thread: 0x3DA8 (Main). 

--------------------------------------------------
Стек вызовов:

# 0 0x0045C575 in C:\Users\Admin\Desktop\Strings\Strings.exe: getLengthOfStrings() at C:/Users/Admin/Desktop/Strings/bestOneginReader.cpp:147:

    145: 
    146:     for(size_t line = 0; line < structAddress->numberOfStrings - 1; line++)
=>  147:         (structAddress->arrOfStringStructs[line]).lengthOfString = (size_t)((structAddress->arrOfStringStructs[line+1]).ptrToString - (structAddress->arrOfStringStructs[line]).ptrToString);
    148: 
    149:     (structAddress->arrOfStringStructs[structAddress->numberOfStrings - 1]).lengthOfString = myStrlen((structAddress->arrOfStringStructs[structAddress->numberOfStrings - 1]).ptrToString) + 1;

# 1 0x0045C4DC in C:\Users\Admin\Desktop\Strings\Strings.exe: getArrOfStringStructs() at C:/Users/Admin/Desktop/Strings/bestOneginReader.cpp:139:

    137:         }
    138:     }
=>  139:     getLengthOfStrings(structAddress);
    140: 
    141: }

# 2 0x0045C3C1 in C:\Users\Admin\Desktop\Strings\Strings.exe: getStructNovel2() at C:/Users/Admin/Desktop/Strings/bestOneginReader.cpp:114:

    112:     structAddress->numberOfStrings    = numberOfStrings;
    113: 
=>  114:     getArrOfStringStructs(structAddress);
    115: 
    116: }

# 3 0x00489DF6 in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:19:

     17: 
     18:     struct novel Onegin = {};
=>   19:     getStructNovel2 (&Onegin,"OriginalOnegin.txt");
     20: 
     21:     for(size_t i = 0; i < Onegin.numberOfStrings; i++){

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 18 2025 00:36:04, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 18 2025 00:36:12

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: signal (11, 0x00): SIGSEGV: Доступ по неверному указателю. Ставьте ассерты! 

Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0045C575 в функции getLengthOfStrings() в файле C:/Users/Admin/Desktop/Strings/bestOneginReader.cpp на строке 147. Попытка прочесть данные по адресу 0x00000008 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции signal() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x005F1ADC (32-bit), Flags: Cmdre0, Thread: 0x3DA8 (Main). 

--------------------------------------------------
Стек вызовов:

# 0 0x0045C575 in C:\Users\Admin\Desktop\Strings\Strings.exe: getLengthOfStrings() at C:/Users/Admin/Desktop/Strings/bestOneginReader.cpp:147:

    145: 
    146:     for(size_t line = 0; line < structAddress->numberOfStrings - 1; line++)
=>  147:         (structAddress->arrOfStringStructs[line]).lengthOfString = (size_t)((structAddress->arrOfStringStructs[line+1]).ptrToString - (structAddress->arrOfStringStructs[line]).ptrToString);
    148: 
    149:     (structAddress->arrOfStringStructs[structAddress->numberOfStrings - 1]).lengthOfString = myStrlen((structAddress->arrOfStringStructs[structAddress->numberOfStrings - 1]).ptrToString) + 1;

# 1 0x0045C4DC in C:\Users\Admin\Desktop\Strings\Strings.exe: getArrOfStringStructs() at C:/Users/Admin/Desktop/Strings/bestOneginReader.cpp:139:

    137:         }
    138:     }
=>  139:     getLengthOfStrings(structAddress);
    140: 
    141: }

# 2 0x0045C3C1 in C:\Users\Admin\Desktop\Strings\Strings.exe: getStructNovel2() at C:/Users/Admin/Desktop/Strings/bestOneginReader.cpp:114:

    112:     structAddress->numberOfStrings    = numberOfStrings;
    113: 
=>  114:     getArrOfStringStructs(structAddress);
    115: 
    116: }

# 3 0x00489DF6 in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:19:

     17: 
     18:     struct novel Onegin = {};
=>   19:     getStructNovel2 (&Onegin,"OriginalOnegin.txt");
     20: 
     21:     for(size_t i = 0; i < Onegin.numberOfStrings; i++){

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 18 2025 00:36:04, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 18 2025 00:36:13

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib предупреждает:

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0045C575 в функции getLengthOfStrings() в файле C:/Users/Admin/Desktop/Strings/bestOneginReader.cpp на строке 147. Попытка прочесть данные по адресу 0x00000008 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

#1: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x005F1ADC (32-bit), Flags: Cmdre0, Thread: 0x3438 (Main). 

--------------------------------------------------
Стек вызовов:

# 0 0x0045C575 in C:\Users\Admin\Desktop\Strings\Strings.exe: getLengthOfStrings() at C:/Users/Admin/Desktop/Strings/bestOneginReader.cpp:147:

    145: 
    146:     for(size_t line = 0; line < structAddress->numberOfStrings - 1; line++)
=>  147:         (structAddress->arrOfStringStructs[line]).lengthOfString = (size_t)((structAddress->arrOfStringStructs[line+1]).ptrToString - (structAddress->arrOfStringStructs[line]).ptrToString);
    148: 
    149:     (structAddress->arrOfStringStructs[structAddress->numberOfStrings - 1]).lengthOfString = myStrlen((structAddress->arrOfStringStructs[structAddress->numberOfStrings - 1]).ptrToString) + 1;

# 1 0x0045C4DC in C:\Users\Admin\Desktop\Strings\Strings.exe: getArrOfStringStructs() at C:/Users/Admin/Desktop/Strings/bestOneginReader.cpp:139:

    137:         }
    138:     }
=>  139:     getLengthOfStrings(structAddress);
    140: 
    141: }

# 2 0x0045C3C1 in C:\Users\Admin\Desktop\Strings\Strings.exe: getStructNovel2() at C:/Users/Admin/Desktop/Strings/bestOneginReader.cpp:114:

    112:     structAddress->numberOfStrings    = numberOfStrings;
    113: 
=>  114:     getArrOfStringStructs(structAddress);
    115: 
    116: }

# 3 0x00489DF6 in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:19:

     17: 
     18:     struct novel Onegin = {};
=>   19:     getStructNovel2 (&Onegin,"OriginalOnegin.txt");
     20: 
     21:     for(size_t i = 0; i < Onegin.numberOfStrings; i++){

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 18 2025 00:37:00, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 18 2025 00:37:08

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------

--------------------------------------------------
TXLib соболезнует...

Программа: C:\Users\Admin\Desktop\Strings\Strings.exe,

ВНЕЗАПНО: signal (11, 0x00): SIGSEGV: Доступ по неверному указателю. Ставьте ассерты! 

Нарушение доступа к памяти.

#1: Исключение EXCEPTION_ACCESS_VIOLATION (0xC0000005) при выполнении кода по адресу 0x0045C575 в функции getLengthOfStrings() в файле C:/Users/Admin/Desktop/Strings/bestOneginReader.cpp на строке 147. Попытка прочесть данные по адресу 0x00000008 в модуле C:\Users\Admin\Desktop\Strings\Strings.exe. Спасибо _txVectoredExceptionHandler(), что сообщил. Люблю его <3

С помощью функции signal() вы можете сами обработать эту ошибку.

#2: TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400], Instance: 0x005F1ADC (32-bit), Flags: Cmdre0, Thread: 0x3438 (Main). 

--------------------------------------------------
Стек вызовов:

# 0 0x0045C575 in C:\Users\Admin\Desktop\Strings\Strings.exe: getLengthOfStrings() at C:/Users/Admin/Desktop/Strings/bestOneginReader.cpp:147:

    145: 
    146:     for(size_t line = 0; line < structAddress->numberOfStrings - 1; line++)
=>  147:         (structAddress->arrOfStringStructs[line]).lengthOfString = (size_t)((structAddress->arrOfStringStructs[line+1]).ptrToString - (structAddress->arrOfStringStructs[line]).ptrToString);
    148: 
    149:     (structAddress->arrOfStringStructs[structAddress->numberOfStrings - 1]).lengthOfString = myStrlen((structAddress->arrOfStringStructs[structAddress->numberOfStrings - 1]).ptrToString) + 1;

# 1 0x0045C4DC in C:\Users\Admin\Desktop\Strings\Strings.exe: getArrOfStringStructs() at C:/Users/Admin/Desktop/Strings/bestOneginReader.cpp:139:

    137:         }
    138:     }
=>  139:     getLengthOfStrings(structAddress);
    140: 
    141: }

# 2 0x0045C3C1 in C:\Users\Admin\Desktop\Strings\Strings.exe: getStructNovel2() at C:/Users/Admin/Desktop/Strings/bestOneginReader.cpp:114:

    112:     structAddress->numberOfStrings    = numberOfStrings;
    113: 
=>  114:     getArrOfStringStructs(structAddress);
    115: 
    116: }

# 3 0x00489DF6 in C:\Users\Admin\Desktop\Strings\Strings.exe: main() at C:/Users/Admin/Desktop/Strings/main.cpp:19:

     17: 
     18:     struct novel Onegin = {};
=>   19:     getStructNovel2 (&Onegin,"OriginalOnegin.txt");
     20: 
     21:     for(size_t i = 0; i < Onegin.numberOfStrings; i++){

--------------------------------------------------
Developed with:

The Dumb Artist Library (TX Library)
TXLib [Ver: 00173a, Rev: 174, Date: 2025-08-03 17:59:06 +0400]
Copyright (C) Ded (Ilya Dedinsky, http://txlib.ru) <mail@txlib.ru>
See license on: http://txlib.ru

TXLib file:	c:\users\admin\downloads\codeblocks\mingw\include\txlib.h
Compiled:	Sep 18 2025 00:37:00, GNU g++ 4.8.1, std=201103L, MinGW Runtime 3.20, 32-bit, DEBUG
Started:	Sep 18 2025 00:37:08

Run file:	C:\Users\Admin\Desktop\Strings\Strings.exe
Directory:	C:\Users\Admin\Desktop\Strings

--------------------------------------------------
